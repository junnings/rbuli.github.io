<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Vue学习思路总结]]></title>
    <url>%2F2018%2F06%2F26%2FVue%E5%AD%A6%E4%B9%A0%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[前言：磨刀不误砍柴工，我的计划是先将Vue框架的学习方法构思了一下。 计划 对Vue框架拥有一个基本的认识 熟悉Vue框架的基本语法与代码书写思维 进行一些小demo的练手 观看一个完整的Vue项目的开发过程 阅读Vue项目的代码 能动手就不bb，直接上手开发这个项目 经过以上的安排完全可以掌握Vue的开发要点，达到应用在日常开发中的目的 1. 对Vue框架拥有一个基本的认识&emsp;&emsp;这一阶段，我已经在上一篇文章中，进行了记录。（主要途径来源于阅读官方文档） 2. 熟悉Vue框架的基本语法与代码书写思维&emsp;&emsp;这一阶段，我主要学习方式是参考官方文档。 3. 进行一些小demo的练手&emsp;&emsp;依旧是Vue官方文档（官方文档上拥有很多nice的实例）。 4. 观看一个完整的Vue项目的开发过程&emsp;&emsp;在此阶段，通过大量的资料查找与筛选，最终决定通过慕课网，进行学习。慕课网上有很多优质的视频教程，安利给大家。 &emsp;&emsp;选定好资源后，通过周末的休息时间，一口气将整套视频看完了，末了觉得头晕脑胀，不过没关系，因为收获还是蛮大的。对于Vue，在脑海中拥有了更加清晰的认识。 &emsp;&emsp;当然其中的知识点，并没有全部掌握（如果要是看一遍就能掌握那简直令人感觉不可思议）。 &emsp;&emsp;不过这一步的目的，只是为了熟悉实践使用Vue开发项目的大体过程而已（毕竟一口气吃下一个大胖子，难度还是很大的）。 5. 阅读Vue项目的代码&emsp;&emsp;实践了解这个项目的开发过程，熟悉整个项目需要实现的功能，对整个项目有也了更完整的认识。 &emsp;&emsp;一个项目开发，个人觉得首先应该对项目的需求、需要实现的功能要点，在脑海里拥有一个清晰的认识。毕竟语言只是工具，思想才是关键。 6. 能动手就不bb，直接上手开发这个项目&emsp;&emsp;纸上得来终觉浅，虽然直接看代码能看懂，但是需要明白：实践动手写了，才能真正掌握。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>前端</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue学习笔记]]></title>
    <url>%2F2018%2F06%2F20%2Fvue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[学习资源：vue中文文档 本文绝大部分资料摘录自Vue官方文档，目的是方便日后查阅与回顾。 Vue.js是什么&emsp;&emsp;Vue是一套用于构建用户界面的 渐进式框架。Vue被设计为可以自底向上逐层应用。Vue的核心库只关注视图层，不仅仅易于上手，还便于与第三方库或既有项目整合。&emsp;&emsp;Vue专注于渲染/更新非常简单的组件树的真实性能。组件的依赖是在渲染过程中自动追踪的。 &emsp;&emsp;Vue整体思想：拥抱经典的Web技术，并在其上进行扩展。(看似贼深奥，其实就是说摈弃以往web技术的短板，吸纳好的方面，并站在巨人的肩膀上前行) &emsp;&emsp;Vue还贴心的提供了Vue-cli脚手架，方便我们快速地构建项目。 &emsp;&emsp;只需一条demo即可立即体验Vue开发的乐趣。（当然前提是你阅读了官方文档 /调皮脸）1&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue&quot;&gt;&lt;/script&gt; 以上内容摘录自 Vue官方文档 附言： &emsp;&emsp;优点很多，但只有动手尝试过才能有真正体会，立即打开官方文档进行尝试吧~（不得不感慨一下，Vue的官方文档做得是真的很友好） 创建一个Vue实例 所有的Vue组件都是Vue实例，并且接受相同的选项对象。 12345678910111213141516171819202122//数据与方法//我们的数据对象var data = &#123; a: 1 &#125;//该对象被加入到一个Vue实例中var vm = new Vue(&#123; data: data&#125;)//获取这个实例上的属性//返回源数据中对应的字段//alert(vm.a == data.a); =&gt; true//设置属性也会影响到原始数据//alert(&apos;vm.a: &apos;+vm.a +&apos; -- data.a: &apos;+data.a)vm.a = 2;//vm.a 与 data.a 都改变了（引用传递）//alert(&apos;vm.a: &apos;+vm.a +&apos; -- data.a: &apos;+data.a)data.a = 3;//同样改变//alert(&apos;vm.a: &apos;+vm.a +&apos; -- data.a: &apos;+data.a) 以上所有操作都会得到即时响应，但是如果插入的值，不是在一开始就声明好的（例如上面的 data.a 属性），则不支持及时响应。 实例：12//我们在控制台向 data对象 添加一个新属性data.b = &apos;hi&apos; 这样的操作不能得到及时响应 解决办法： 在创建时即声明好，在晚些时候会使用到的字段并赋初始值。 插值以文本的方式插入12345//当mes的值被改变时，所有存在mes引用的位置，都将被即时更新&lt;span&gt;message: &#123;&#123; mes &#125;&#125;&lt;/span&gt;//执行一次性地插值&lt;span v-once&gt;这个将不会改变： &#123;&#123; mes &#125;&#125;&lt;/span&gt; 插入原始html&emsp;&emsp;双括号会将数据解释为普通文本，而不是html代码。输出html需要使用 v-html 指令12&lt;p&gt;Using mustaches: &#123;&#123; rawHtml &#125;&#125;&lt;/p&gt;&lt;p&gt;Using v-html directive:&lt;span v-html=&quot;rawHtml&quot;&gt;&lt;/span&gt;&lt;p&gt; &emsp;&ensp;感想：其实就是text()方法与html()地使用 使用JavaScript表达式&emsp;&emsp;Vue.js提供了完全地Javascript表达式支持。12345&#123;&#123; number + 1 &#125;&#125;&#123;&#123; ok ? &apos;YES&apos; : &apos;NO&apos; &#125;&#125;&#123;&#123; message.split(&apos;&apos;).reverse().join(&apos;&apos;) &#125;&#125;&lt;div v-bind:id=&quot;&apos;list-&apos; + id&quot;&gt; &lt;/div&gt; &emsp;&emsp;但每个绑定都只能包含单个表达式。1234&lt;!--这是语句，不是表达式--&gt;&#123;&#123; var a = 1 &#125;&#125;&lt;!-- 控制流也不会生效，可用三元表达式替代--&gt;&#123;&#123; if(ok)&#123;return message&#125; &#125;&#125; 指令&emsp;&emsp;指令是带有 v- 前缀地特殊特性。它的预期是单个JavaScript表达式。职责是，当表达式地值改变时，将其产生的连带影响，响应式地作用于DOM。 &emsp;&emsp;感想：和EL、JSTL的思想大同小异，表现形式不同而已。 参数&emsp;&emsp;有些指令能够接收一个 “参数”，在指令名称之后以冒号表示。12//例如用于响应式更新html&lt;a v-bind:href=&quot;url&quot;&gt;...&lt;/a&gt; &emsp;&emsp;上面的 href 参数，使得 v-bind 指令将 标签的 href 的 url 进行绑定，可以实现动态改变该标签的跳转地址。 1&lt;a v-on:click=&quot;doSomething&quot;&gt;...&lt;/a&gt; &emsp;&emsp;上面的指令 v-on 用于监听DOM事件。 缩写&emsp;&emsp;Vue.js给 v-bind 和 v-on 这两个最常用的指令，提供了特点简写。 v-bind 缩写1234&lt;!--完整语法--&gt;&lt;a v-ding:href=&quot;url&quot;&gt;...&lt;/a&gt;&lt;!--缩写--&gt;&lt;a :href=&quot;url&quot;&gt;...&lt;/a&gt; v-on 缩写1234&lt;!--完整语法--&gt;&lt;a v-on:click=&quot;doSomething&quot;&gt;...&lt;/a&gt;&lt;!--缩写--&gt;&lt;a @click=&quot;doSomething&quot;&gt;...&lt;/a&gt; p.s：再次声明这不叫偷懒，这叫理性提高工作效率 /笑 计算属性 &emsp;&emsp;在我们需要get元素属性之前，可以对这个属性进行操作，当我们拿到的就是经过特殊处理后的数据。 &emsp;&emsp;由于是引用自源数据，所有当源数据被改变时，计算属性也会随之改变。（getter） 实例： 123456789101112131415161718192021 &lt;!--index.js--&gt; var vm = new Vue(&#123; el: &apos;#example&apos;, data: &#123; message: &apos;hello 你好&apos; &#125;, computed: &#123; //计算属性的getter reversedMessage:function()&#123; //this 指向 vm 实例 return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;) &#125; &#125;&#125;)&lt;!--index.html--&gt;&lt;div id=&quot;example&quot;&gt; &lt;p&gt;Original message: &quot;&#123;&#123; message &#125;&#125;&quot;&lt;/p&gt; &lt;p&gt;Conputed reversed message: &quot;&#123;&#123; reversedMessage&#125;&#125;&quot;&lt;/p&gt;&lt;/div&gt; 结果： 123 Original message: &quot;hello 你好&quot;Conputed reversed message: &quot;好你 olleh&quot; 感想：可以看作是java中的字段封装，因为计算属性 同样存在 getter 与 setter 的表现形式。好玩的东西很多。 一点骚操作12345678910111213141516171819new Vue(&#123; el: &apos;#app&apos;, render: h =&gt; h(App)&#125;)等价于new Vue(&#123; el: &apos;#app&apos;, render: function(h)&#123; return h(App) &#125;&#125;)-----------------取反var flag = true;flag = ! falg; 按照官方文档一路打下来，觉得有些概念还是挺模糊的，后来配合网上的教程一起进行学习，动手做个小项目下来基本的都能掌握。 纸上得来终觉浅，绝知此事要躬行。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>前端</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue开发环境搭建]]></title>
    <url>%2F2018%2F06%2F20%2Fvue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[安装 git12$ git --versiongit version 2.14.3.windows.1 安装 node.js12$ npm -v3.10.10 &emsp;&emsp;右键打开git（打开cmd也可以） 检查版本 检查 git 版本：git –version 检查 npm 版本：npm -v （需要在6.9以上） 检查 node 版本：node -v （需要在3.10以上） 安装 vue&emsp;&emsp;输入命令： npm install –global vue-cli安装完成后检查版本：vue –version 到这里vue开发的基础环境即搭建完毕。下面我们尝试创建个vue项目试试 :) 开始第一个vue项目&emsp;&emsp;首先在磁盘中创建一个用来存放我们的vue项目的文件夹，然后 cd 到我们所建的文件夹中（我建的文件夹叫做 ‘vue’） &emsp;&emsp;创建项目输入：vue init webpack my-project &emsp;&emsp;输入命令之后，将自动创建一个基于webpack模板的新项目，在这一过程中会要求你为这个新项目设置一些基础配置（项目名，作者等等），配置如下： 123456789101112131415161718192021222324252627rbuli@service MINGW64 /g/vue$ vue init webpack my-project? Project name (my-project) hellovue? Project name hellovue? Project description (A Vue.js project) myvueproject? Project description myvueproject? Author (rbuli &lt;xinleiwork@126.com&gt;)? Author rbuli &lt;xinleiwork@126.com&gt;? Vue build standalone? Install vue-router? (Y/n) y? Install vue-router? Yes? Use ESLint to lint your code? (Y/n) n? Use ESLint to lint your code? No? Set up unit tests (Y/n) n? Set up unit tests No? Setup e2e tests with Nightwatch? (Y/n) n? Setup e2e tests with Nightwatch? No? Should we run `npm install` for you after the project has been created? (recom? Should we run `npm install` for you after the project has been created? (recommended) npm vue-cli · Generated &quot;my-project&quot;.# Installing project dependencies ...# ======================== 安装依赖&emsp;&emsp;cd my-project(打开目录) &emsp;&emsp;npm install (安装依赖) p.s:如果上面出现了“? Should we run npm install for you after the project has been created? (recommended” 则不需要执行这条命令 启动你的第一个vue程序&emsp;&emsp;npm run dev (运行) &emsp;&emsp;等待启动完成 &emsp;&emsp;使用浏览器访问项目地址： http://localhost:8080 （默认地址） &emsp;&emsp;hello,vue :) &emsp;&emsp;开始你的vue之旅！ 一些vue开发的配置 使用 VSCode 进行vue开发vscode 传送门，点击连接选择适合你的版本进行下载安装。 安装插件 &emsp;&emsp;&emsp;&emsp;打开 VSCode&emsp;&emsp;输入组合键：Ctrl + P&emsp;&emsp;输入：ext install vetur &emsp;&emsp;回车 &emsp;&emsp;安装完成后还需要进行一点配置：1234&quot;emmet.syntaxProfiles&quot;: &#123; &quot;vue-html&quot;: &quot;html&quot;, &quot;vue&quot;: &quot;html&quot;&#125; &emsp;&emsp;打开 Settings.json: &emsp;&emsp;左上角单击 文件 &gt;&gt; 首选项 &gt;&gt; 设置 &emsp;&emsp;直接粘贴上去保存关闭就ok了 以上是安装插件的示例。 ps:贼麻烦，最后我继续使用HBulider进行开发:P HBuilder用了就不回去了 /感动得哭泣 可以参考这一篇博文，进行vscode插件的安装和配置。 参考这篇文章进行vue开发相关插件的安装与配置 资料参考链接： Vue.js Vue.js脚手架安装 优雅地使用 VSCode 来编辑 vue 文件优雅地使用 VSCode 来编辑 vue 文件 Vue2.0 搭建Vue脚手架（vue-cli） VS Code使用之基本设置与配置详解]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>前端</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 搭建博客提交百度 sitemap 抓取失败]]></title>
    <url>%2F2018%2F06%2F11%2FHexo-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%8F%90%E4%BA%A4%E7%99%BE%E5%BA%A6-sitemap-%E6%8A%93%E5%8F%96%E5%A4%B1%E8%B4%A5%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;碰到这个问题的前因是我的博客挂载在github上面，但是由于工作原因导致博客SEO被搁置了有一段时间。 &emsp;&emsp;碰到这个问题的时候，原以为是dns解析的问题，因为github上面不允许爬虫去爬连接，所以博客是同时还挂载了一份在coding上面的。也就是说当国外访问时，我设置的是将地址解析到github上面，而国内访问时，是解析至coding上面的（如下图所示）。 &emsp;&emsp;遂重新配置，期间盯着每一个字母，确认完全没有错误后排除这猜测。 &emsp;&emsp;转念又想是不是sitemap文件出了问题呢？ &emsp;&emsp;直接输入sitemap路径访问，也排除了这一可能。 &emsp;&emsp;在图中可以看到，sitemap是可以正常被访问的。 &emsp;&emsp;无解，打开百度抓取诊断测试了一波。 &emsp;&emsp;发现了这样一个现象： &emsp;&emsp;移动端是可以抓取到的，但是pc端却抓取失败（牛皮），跳转可以理解，但是为什么移动端抓取成功，但PC却不行呢？ &emsp;&emsp;百思不得其解，最后做出结论：百度又抽风了。 &emsp;&emsp;点击【抓取详情】 &emsp;&emsp;发现IP是185开头的，突然灵光一闪：会不会是跳转出了问题呢？会不会是原本应该爬取coding上面的blog却爬到github上面去了呢(上面说过，github禁止了百度爬虫去爬连接)？ &emsp;&emsp;刹那间仿佛柯南附体，在脑海中自动脑补出破案时播放的BGM，手中win+r组合键瞬间按下，飞快的打开cmd，输入： ping rbuli.github.io &emsp;&emsp;简直不敢相信我的双眼，于是我再次测了一遍。 &emsp;&emsp;破案！ &emsp;&emsp;刚刚说过，dns解析是绝对不存在问题的（我表示对我5.1视力很有信心） &emsp;&emsp;也证明了我看似随意的结论：百度又抽风了 &emsp;&emsp;为了结论的严谨性，为确保万一我把指向github的解析删除后再测试了一遍（甚至专门添上了百度访问的解析）： &emsp;&emsp;再测一遍（此处你应该可以感受到，我对这个结论同样存在一丝丝怀疑）。 &emsp;&emsp;实锤！ /愣住 &emsp;&emsp;自己默默的点了首凉凉，表达此刻伤感的心情。 解决方案： &emsp;&emsp;点击报错，提交反馈。（还能怎么办，我也很绝望） P.S：如果你是从百度上面搜索到了此篇文章且域名为（cssmini.com），说明我的问题已经解决😊 同时送给搜到这篇文章的你一首凉凉：]]></content>
      <categories>
        <category>日常修BUG记录</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[快速掌握一门新的编程语言]]></title>
    <url>%2F2018%2F05%2F26%2F%E5%BF%AB%E9%80%9F%E6%8E%8C%E6%8F%A1%E4%B8%80%E9%97%A8%E6%96%B0%E7%9A%84%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%2F</url>
    <content type="text"><![CDATA[1.熟悉语言背后的故事，比如优缺点，特性等(只需要了解大概就差不多了)。 2.熟悉语言的运算符和表达式 3.常量和变量的声明 4.了解命名规则 5.了解注释的使用 6.了解数据类型 7.掌握语言有哪些控制语句（无非就是顺序、选择、循环等） 8.异常处理 9.语言独有的特点 10.语言环境搭建 11.常用的ide 12.代码编写规范 根据以上的总结，我实践学习了PL/SQL 1.熟悉语言背后的故事，比如优缺点，特性等(只需要了解大概就差不多了)。&emsp;&emsp;PL/SQL(Procedural Language/SQL ,过程语言/SQL)是结合了Oracle过程语言和结构化查询语言（SQL）的一种扩展语言。使用PL/SQL可以编写具有很多高级功能的程序，虽然通过多个sql语句也能实现同样的功能，但是相比而言，PL/SQL具有更为明显的一些优点。（百度上面都有，就不赘述了） 2.熟悉语言的运算符和表达式PS:搜索了一下，就是些通用的运算符.123456789101112131415161718192021222324关系运算符： = // 等于 &lt;&gt;,!=,~=,^= // 不等于 &lt; // 小于 &gt; // 大于 &lt;= // 小于等于 &gt;= // 大于等于 一般运算符： + // 加号 - // 减号 * // 乘号 / // 除号 := // 赋值号 =&gt; // 关系号 .. // 范围运算符 || // 字符连接符逻辑运算符： IS NULL // 是空值 BETWEEN AND // 介于两者之间 IN // 在一列值之间 AND // 与 OR // 或 NOT // 取反 3.常量和变量的声明&emsp;&emsp;在PL/SQL块的可执行部分引用变量和常量前，必须先进行声明。1234567891011121314151617181920//声明变量的语法： variable_name data_type[(size)] [:=init_value];/*在语法中： 1.variable_name表示变量名称 2.data_type表示变量的SQL或/PL/SQL数据类型 3.size是指定变量的范围 4.init_value指的是变量的初始值*///声明常量的语法： variable_name CONSTANT data_type := value;/*PL/SQL程序设计中的标识符定义与SQL的标识符定义的要求相同，要求与限制如下： 1.标识符名不能超过30个字符 2.第一个字符必须为字母 3.不区分大小写 4.不能用 “-” 减号 5. 不能是SQL保留字*/ 4.了解命名规则【假装有张变量命名方法表】根据上图可以很清楚的了解PL/SQL的命名规范 5.了解注释的使用123两种方式： 1. 使用双减号 ‘ -- ’加注释（单行注释） 2. 使用 ‘ /* 我是注释 */ ’加注释 （多行注释） 6.了解数据类型百度查了一波，粗略总结，共有三大类： 标量数据类型 LOB数据类型 属性类型 7.掌握语言有哪些控制语句&emsp;&emsp;PL/SQL程序可通过控制结构来控制命令执行的流程。标准的SQL没有流程控制的概念，而PL/SQL提供了丰富的流程控制语句。 &emsp;&emsp;控制结构共有三种类型，具体包括条件控制，循环控制和顺序控制。 条件控制12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849/* 1.条件控制，条件控制包括两个 IF 语句和 CASE 语句*///if语句语法： IF &lt;布尔表达式&gt; THEN PL/SQL 和 SQL语句 END IF; ---------------- IF &lt;布尔表达式&gt; THEN PL/SQL 和 SQL 语句 ELSE 其他语句 END IF; --------------- IF &lt;布尔表达式&gt; THEN PL/SQL 和 SQL 语句 ELSIF &lt;其他布尔表达式&gt; THEN 其他语句 ELSIF &lt;其他布尔表达式&gt; THEN 其他语句 ELSE 其他语句 END IF; //else if 有点另类这里要写成 elsif//CASE 语句语法： ---------------- CASE 条件表达式 WHEN 条件表达式结果1 THEN 语句段1 WHEN 条件表达式结果2 THEN 语句段2 ... WHEN 条件表达式结果n THEN 语句段n [ELSE 语句段] END CASE; -------------- CASE WHEN 条件表达式1 THEN 语句段1 WHEN 条件表达式2 THEN 语句段2 ... WHEN 条件表达式n THEN 语句段n [ELSE 语句段] END CASE; 循环控制12345678910111213141516171819/* 2.循环共有三种类型，包括 LOOP 循环，WHILE 循环和 FOR循环。*///LOOP循环语法: LOOP 要执行的语句; EXIT WHEN &lt;条件语句&gt; --条件满足，退出循环语句 END LOOP; //WHILE 循环语法： WHILE &lt;布尔表达式&gt; LOOP 要执行的语句; END LOOP; //FOR 循环语法 FOR 循环计数器 IN [REVERSE] ... 上限 LOOP 要执行的语句； END LOOP; 顺序控制&emsp;&emsp;顺序控制用于按顺序执行语句。顺序控制包括NULL语句和GOTO语句。GOTO 语句不推荐使用。 &emsp;&emsp;NULL语句：NULL语句是一个可执行语句，相当于一个占位符或不执行任何操作的空语句，可以使得某些语句变得有完整性，提供程序的可读性，保证其他语句结构的完整性和正确性。]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>编程</tag>
        <tag>PL/SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[什么是单例模式]]></title>
    <url>%2F2018%2F05%2F16%2F%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;单例模式，顾名思义就是程序在运行的过程中，有且只有一个实例。它必须满足三个关键点。 &emsp;&emsp;1）一个类只有一个实例。这是满足单例模式最基本的要求，若要满足这个关键点，只能提供私有的构造器，即保证不能随意创建该类的实例。123456789101112131415161718public class ConfigManager &#123; private static ConfigManager configManager; //私有构造器-读取数据库配置文件 private ConfigManager()&#123; String configFile = &quot;database.properties&quot;; properties = new Properties(); InputStream is = ConfigManager.class.getClassLoader().getResourceAsStream(configFile); try &#123; properties.load(is); is.close(); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125;&#125; &emsp;&emsp;在上述代码中，我们把读取配置文件的I/O操作代码放入私有构造器里，这样可以有效地保证I/O操作在整个系统运行期间仅被执行一次，以解决资源消耗问题。 &emsp;&emsp;2）它必须自行创建这个实例。对于这一点，正是体现了：单例模式的“有且仅有一个实例”的这一特性。我们要保证唯一性，也就意味着必须要提供一个实例，那么就需要它自行创建，定义一个ConfigManager类型的静态的私有对象，以便向外界提供该类实例时使用。1234567891011121314151617181920//读取配置文件的工具类-单例模式public class ConfigManager &#123; private static ConfigManager configManager; private static Properties properties; //私有构造器-读取数据库配置文件 private ConfigManager()&#123; String configFile = &quot;database.properties&quot;; properties = new Properties(); InputStream is = ConfigManager.class.getClassLoader().getResourceAsStream(configFile); try &#123; properties.load(is); is.close(); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125;&#125; &emsp;&emsp;在上面的代码中，我们定义了一个ConfigManager的静态私有对象configManager。 &emsp;&emsp;3）它必须自行向整个系统提供这个实例。最后一点也是至关重要的，外界需要获取并使用这个单例类的实例，但是由于该类的构造器是私有的，外界无法通过new去获取它的实例，那么就必须提供一个静态的公有方法，该方法创建或者获取它本身的静态私有对象并返回。 123456789101112131415161718192021222324252627282930//读取配置文件的工具类-单例模式public class ConfigManager &#123; private static ConfigManager configManager; private static Properties properties; //私有构造器-读取数据库配置文件 private ConfigManager()&#123; String configFile = &quot;database.properties&quot;; properties = new Properties(); InputStream is = ConfigManager.class.getClassLoader().getResourceAsStream(configFile); try &#123; properties.load(is); is.close(); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; //全局访问点 public static ConfigManager getInstance()&#123; if(configManager == null)&#123; configManager = new ConfigManager(); &#125; return configManager; &#125; //根据传入的key获取相应的value值 public String getValue(String key)&#123; return properties.getProperty(key); &#125;&#125; &emsp;&emsp;在上面的代码中，我们添加了一个全局的访问点getInstance()方法，该方法返回该类的实例，以被外界使用。在该方法体内，进行了简单的逻辑判断，若configManager为null，那么创建该实例；若不为空，那么直接返回configManager实例即可，不需要再实例化该类的对象。 &emsp;&emsp;为什么要将getInstance（）方法定位为static呢？ &emsp;&emsp;因为作为该单例类的全局访问点，外界需要哦调用该方法来获取configManager方法，则该方法必须也是静态的，否则无法调用。]]></content>
  </entry>
  <entry>
    <title><![CDATA[胡思乱想]]></title>
    <url>%2F2018%2F05%2F14%2F%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3%2F</url>
    <content type="text"><![CDATA[关于智能手机&emsp;&emsp;近些年来智能手机的发展可谓是日新月异，无论是硬件方面来说，还是从软件方面。回想一下，12年、13年的时候，身边的朋友用的都还是带按键的手机，牛皮一点的是传说中的触屏（用指甲使劲戳几下就能选中）手机。功能上也就是打电话，最多带个QQ。总的来说没有跨出手机本身的意义。&emsp;&emsp;记得是从13年左右的时候，智能手机出现在了中国大众的手中（依稀记得当时被炒上天的iPhone，一男子割肾只求一台iphone4s）笑，随着智能手机的发展，安卓迎来了一波春天。安卓平台上的app，尽力的满足着基数巨大的国民，只有想不到，没有做不到（毕竟流量即金钱）。微信、淘宝、短视频app、自媒体，从各个角度出发吸引着大众的眼球。触手可得的资讯、宝贵的知识，动动手指即可获得，不！手指都不需要动，即自动送到你的眼下。只求你的片刻停留。&emsp;&emsp;在这样的环境下，产生了各种博人眼球的新兴词汇：知识焦虑、碎片化阅读、知识付费。产生这些词汇背后的本质是什么？获得你的停留，获取流量，继而获利。是的，有一小部分人获利了，根据2/8定律，被获利的对象是那八成的大众。&emsp;&emsp;大众是愚昧的，像一位皇帝一样被伺候着，被虚有的信息刺激着大脑多巴胺的分泌，获取着令大脑愉悦的快感。温水煮青蛙。使用虚拟的网络、朋友圈，装饰着虚幻的小我。时间久了变得分不清哪个才是真正的自我。&emsp;&emsp;更加可怕的是这一代的小孩，从小就生活在这样虚无飘渺的世界中。&emsp;&emsp;何以解忧？引用许嵩许多年前的写的歌词 放下客户端，立地成佛 关于色&emsp;&emsp;现中国环境下，随着网络的普及，弃前人之鉴而不顾。完全不知戒色为何物。子曰：少之时，气血未定，戒之在色。又有前人曰：二八佳人体似酥，腰间仗剑斩愚夫。 &emsp;&emsp;唾手可及的情色讯息，打开潘多拉盒子的现代中国，年轻一代深受茶毒。殊不知，精为人之本，发之华。&emsp;&emsp;为着短暂的快感，而全然不顾根本。殊不知，所谓的快感，其实是毒药。&emsp;&emsp;食与色，为人之本性。驾驭不了本性之人，与禽兽何异。&emsp;&emsp;当局者迷旁观者清。跳出来，你能看到更美好的世界。 关于阅读&emsp;&emsp;阅读一事，实在有趣。白日清欢无它事，摇椅捧书笑偷闲。多少人迷失在所谓的阅读上面，以为可以寻到宝藏，还是太轻浮了。将心静下来，仔细想想宝藏在哪里？&emsp;&emsp;书有消遣与教材之分（个人看法，欢迎探讨）。&emsp;&emsp;千人千面，在消遣类的书籍中，不同的人都不同的感想和收获。这是强求不来的，有些书，人家说好，但是你读不进去，硬着头皮读下去，你也得不到什么。你选择书，书也在选择你。还不如洒脱的将其丢在一旁。等他日机遇到了自然会想起。&emsp;&emsp;教材类书籍，才是你学习知识的宝贵财富。它讲述的是明确的内容，它所存在的意义就是将作者的知识记载下来，供世人消化、学习。自然，干货的汲取舒适度、速度肯定是不如消遣类书籍来得愉悦、来得迅速。但是这毕竟是实实在在的知识呀。&emsp;&emsp;人天性就是追寻舒适。能掌控自己的人，属于少数。 关于内心当局者迷旁观者清 &emsp;&emsp;上面这句话，你真的懂吗？&emsp;&emsp;人是由无数细胞组成的碳基生命体，细胞是新陈代谢的，也就是说，从理论上讲，你从出生到现在，实际上你的身体已经换了好几遍了。你还是你吗？&emsp;&emsp;没错，你还是你，我现在是在和真正的你讲话。我口中的你，是你的思想本身。不用去别处寻找，你就是你。情绪、欲望、邪念都不是真的你。跳出来，你就是不一样的你。身体是客观存在的物体，而你（本我）才是旁观着这一切的旁观者。&emsp;&emsp;嗯，时间不早了，就写到这里吧。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>胡思乱想</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[乐理笔记]]></title>
    <url>%2F2018%2F05%2F11%2F%E4%B9%90%E7%90%86%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[NO.1&emsp;&emsp;什么是拍? 1 2 3 4 | 2 2 3 4 | 3 2 3 4。。。这就是拍，一个数字就是一拍 &emsp;&emsp;什么是速度? 一分钟有多少拍 &emsp;&emsp;什么是小节?一定数量的拍，构成小节 &emsp;&emsp;节拍 4/4123454 : 每小节有几拍（这里是每小节有四拍）--4 ：以几分音符为一拍（这里是以四分音符为一拍） &emsp;&emsp;音符时值NO.2&emsp;&emsp;半音、全音全全半全全全半 &emsp;&emsp;什么是音名? 唱名?&emsp;&emsp;钢琴键盘命名NO.3 &emsp;&emsp;升号调、降号调升号调：黑键用升调 降号调：黑键用降调 其中的公式: 全全半全全全半 (Q币：q q b q q q b ) &emsp;&emsp;音的稳定性 1 3 5 稳定 2 4 6 7 不稳定 &emsp;&emsp;音的倾向性 存在的问题（笔记） 五线谱点看不准（特别是低音铺上面的音符） 不能熟练读出唱名，看到音名不能快速反应出对应的琴键 不知如何练习基本功 弹奏的时候，节奏不稳，跟不住节拍器 一些思考1.学习的时候，特别是看视频的时候，将自己心中的问题，通过笔记记下来，然后将问题的解答，用自己的话写出来。 2.看视频的时候，如果有没有看懂的地方，一定要停下来，将问题搞明白，不然后面的学习，都将是无效输入。 3.弹奏的时候，将唱名同步读出来。 学习来源：doyoudo-乐理知识]]></content>
      <categories>
        <category>乐理</category>
      </categories>
      <tags>
        <tag>兴趣</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洞玄灵宝定观经]]></title>
    <url>%2F2018%2F04%2F01%2F%E6%B4%9E%E7%8E%84%E7%81%B5%E5%AE%9D%E5%AE%9A%E8%A7%82%E7%BB%8F%2F</url>
    <content type="text"><![CDATA[天尊告左玄真人曰：夫欲修道，先能舍事。外事都绝，无与忤心。然后安坐，内观心起。若觉一念起，须除灭务令安静。其次，虽非的有贪着，浮游乱想，亦尽灭除。昼夜勤行，须臾不替。唯灭动心，不灭照心。但凝空心，不凝住心。不依一法，而心常住。然则凡心，躁兢其次，初学息心甚难，或息不得，暂停还失。去留交战，百体流行。久久精思，方乃调熟。勿以暂收不得，遂废千生之业。少得静已，则于行立坐卧之时，涉事之处，喧闹之所，皆作意安。有事无事，常若无心。处静处喧，其志惟一。若束心太急，又则成病。气发狂颠，是其候也。心若不动，又须放任。宽急得所，自恒调适。制而不着，放而不动。处喧无恶，涉事无恼者，此是真定。不以涉事无恼，故求多事；不以处喧无恶，强来就喧。以无事为真宅，有事为应迹。若水镜之为鉴，则随物而现形。善巧方便，唯能入定。慧发迟速，则不由人。勿令定中，急急求慧。急则伤性，伤则无慧。若定不求慧，而慧自生，此名真慧。慧而不用，实智若愚。益资定慧，双美无极。若定中念想，多感众邪。妖精百魅，随心应见。所见天尊，诸仙真人，是其祥也。唯念定心之上，豁然无覆；定心之下，旷然无基。旧业日消，新业不造。无所挂碍，迥脱尘笼。行而久之，自然得道。 夫得道之人，凡有七候。一者，心得易定，觉诸尘漏。二者，宿疾普销，身心轻爽。三者，填补夭损，还年复命。四者，延数万岁，名曰仙人。五者，炼形为气，名曰真人。六者，炼气成神，名曰神人。七者，炼神合道，名曰至人。其于鉴力，随候益明。得至道成，慧乃圆备。若乃久学定心，身无一候。促龄秽质，色谢方空。自云慧觉，又称成道者，求道之理，实所未然。说颂曰：智起生于境，火发生于缘。各是真种性，承流失道源。起心欲息知，心起知更烦。了知性本空，知则众妙门。 #转载自网络]]></content>
      <categories>
        <category>观心</category>
      </categories>
      <tags>
        <tag>观照</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[对人工智能的一些思考]]></title>
    <url>%2F2017%2F12%2F01%2F%C2%96%C2%96%E5%AF%B9%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%2F</url>
    <content type="text"><![CDATA[前段时间，在朋友圈看到的一张图片。促使我写下了这篇文章。 封面上，满大街的机器人行走散步。人类席地而坐，衣衫滥路扮演着乞讨者的角色。意指明显–在未来社会，人工智能日渐精进，人类的生存空间被机器人剥夺，从而沦为了流落街头的弱者。 图片所传达的意图，不由的使人联想到目前大火的人工智能话题。世界上首位拥有身份证的智能机器人诞生、阿里ai-双11的超级智能生产力,每秒能做8000张海报、申通快递分拣机器人效率惊人:70%人工下岗、无人超市。这些无不传达着，在未来几年之内工作单一而重复的传统行业将被人工智能替代。 [人类之手与智能科技接触] 做什么工作最有可能被机器人淘汰？BBC基于剑桥大学研究者MichaelOsborne和Carl Frey的数据体系分析了365种职业在未来的 ”被淘汰概率“，以下是其中部分职业的被淘汰概率。（排名越靠后越安全） 再来看看几条人工智能的新闻： 前不久，马云的第一家无人超市在杭州开业了 中国首个机器人工厂已经在广东东莞建造，这家机器人工厂成功地解放了90%的人类劳动力。 人工智能医生 “沃森 “已在江苏首诊，10秒就开出了肿瘤治疗方案。 细思极恐，就拿传统的工厂来说，员工上班效率，员工工资与之机器人相比无疑是处于劣势的。机器人仅仅需要日常维护和维修，成本是极为低廉的。 [智能AR在线购物] 通过上面的数据，我们可以得出如果工作符合以下特征，那么被机器人取代的可能性非常大： 1.无需天赋，经由训练即可掌握的技能； 2.大量的重复性劳动，每天上班无需过脑，但手熟尔； 3.工作空间狭小，坐在格子间里，不闻天下事。 虽说上图中分析详情仅基于这些职业在英国的前景及本土数据，但从这些概率中我们不难发现，如果你的工作包含以下三类技能要求，那么，你被机器人取代的可能性非常小： 1.社交能力、协商能力、以及人情练达的艺术； 2.同情心，以及对他人真心实意的扶助和关切； 3.创意和审美。 你，是否处境危险？]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>胡思乱想</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[编程简史]]></title>
    <url>%2F2017%2F11%2F28%2F%C2%96%C2%96%E7%BC%96%E7%A8%8B%E7%AE%80%E5%8F%B2%2F</url>
    <content type="text"><![CDATA[编程简史 说到编程简史（咳咳，敲黑板)小编给大家从计算机的起源开始说起。 计算机分为软件和硬件。起初计算机的发明是在二战时期，应用于军事。当时计算机体积一间教室都容纳不下，但是作为人类，懒是科技进步的原始动力。经过大牛的努力计算机的体积不断缩小。计算机也从原来的仅仅应用军事普及到了民用。 至此，基于计算机硬件得以运行的各种软件如雨后春笋般野蛮生长。而开发这些软件在最初的时候使用的编程语言呢？ 叫做机器语言，机器语言见名知意，是给机器看的。 也就是我们现在所说的二进制：0110 0100…二进制由1和0组成。 可想而知老是0011 0110 的，大牛看多了也头疼啊，这么多。怎么办呢？ 没错，偷懒。大牛们巧妙的更进一步创造了一种比机器语言更加便利的语言：汇编。那什么又是汇编呢？ 汇编指汇编语言，汇编程序。把汇编语言翻译成机器语言的过程称为汇编。在汇编语言中，用助记符(Memoni)代替操作码，用地址符号(Symbol)或标号(Label)代替地址码。这样用符号代替机器语言的二进制码，就把机器语言变成了汇编语言。 这下用符号来代替机器语言指挥计算机快捷多了吧？对，确实快多了。但是符号多了也记不住啊。要不说大牛怎么叫大牛呢，思想跟普通人就是不一样，不知道满足还特别懒~ 于是乎，就像西方的上帝说要有光，于是产生的光。上帝说要日夜交替，于是有了白天黑夜。大牛说不行还是太麻烦了。于是自己写了门语言叫做：C语言 ：） C语言的诞生，代表着一场革命。它将编程划分为高级语言与低级语言。 先前的机器语言和汇编是直接指挥计算机硬件进行工作的（效率高），而高级语言 “看不见”机器的硬件结构，不能用于编写直接访问机器硬件资源的系统软件或设备控制软件。为此，一些高级语言提供了与汇编语言之间的调用接口。当然相对的效率会有下降，但是抵不过方便 易用的特点。 由于C语言简单易用的特性，C语言很快便传播开来，也因为C语言的诞生为后来人提供了一条可行的思路，继而到产生了Java C# VB等等各式各样的编程语言。 这时，可能有人要说了从C语言的诞生到现在，产生了这么多编程语言。我该学哪一门？哪一门更加厉害实用呢？ 我不能给你一个确定的答案。 因为，你要有一个思维：编程语言只是工具，工具的如何使用需要的是思维！ 就如同我现在给你一把手枪，你要如何去使用需要的是你的思维。 也如同文章中的大牛一样，因为机器语言，汇编语言的不实用而产生了要自己造一个出来的想法。 靠的是什么？同样是思维。 拥有不同于他人思维，才能走更远。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>胡思乱想</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[千里之行--Java环境变量配置]]></title>
    <url>%2F2017%2F11%2F11%2F%E5%8D%83%E9%87%8C%E4%B9%8B%E8%A1%8C-Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[正所谓欲行其事，必利其器。学习Java也是这个道理。首先学习Java之前我们需要为Java搭建环境变量。大家可以把Java看成是一个需要细心呵护的孩子，在它来到一个陌生的世界时. 我们需要告诉它，它的家在哪里，门牌号是多少。出去玩的时候，它需要搭哪一辆公交车才能回到家。怎么样才不会迷路。 环境变量就是我们告诉它”地址“的地方。而Java它是一个非常聪明的孩子（不然我们也不会靠这个来吃饭对吧：） ，只需要你告诉它一遍就能够记住。刚刚上面所说的陌生世界就是电脑中的系统啦。 首先第一步我们需要告诉它 “它的家在哪里” 右键桌面上的“计算机图标”-“属性”-“高级系统设置”-“高级”-右下角有一个“环境变量”-“新建“ 我们就是在这里告诉它”门牌号“是多少多少 首先 我们的小Java刚来到这个陌生 世界，又需要让它把这里当做一个 温馨的家 我们就需要在这里给他做一个小窝啦。 所以我们需要告诉电脑：那个谁谁谁，现在在什么什么地方蹲着。它现在那个位置，以后就是它的家了。你按照我说的去做！！！ 步骤：单击新建 变量名：就是我们给Java 的小窝取的名字 变量值：就是它蹲的地方（就是你安装jdk的路径），注意只需要具体到它的蹲在什么位置. 不需要具体到它多重、多高、穿什么鞋子之类的（又不是查户口，问这么细干嘛：） 单击确定，Java的小窝就做好啦：） //是不是有点太草率了？？ 然后 我们就需要给它到公安局录入它的身份。//毕竟是黑户口嘛 在系统变量中下拉，找到 PATH 注意在这里面的数据，相当于你电脑里面 ” 所有系统软件” 的户口。小手千万别抖：）因为一不小心你电脑中的系统软件就全部变成黑户口了。 %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin 上面这一行代码相信你如果有用心看我上面辛辛苦苦码的字，就应该知道 %JAVA_HOME% 就是我们刚才给小Java 建的小窝。至于为什么加两个百分号呢？为什么为什么？毕竟叫做小窝嘛，有两个百分号过分了？ 说正经的，这两个百分号有引用的意思，表示将引用 名字为”JAVA_HOME”环境变量中的值。简单点说，用 JAVA_HOME 这串代码代替了它其中的变量值。 相当于我们为 上图中所标识 的地址 取了一个别名叫做 JAVA_HOME，方便我们使用与记忆。而且既然是别名 那为什么要叫做JAVA_HOME 也不是为了洋气。 目的是为了”见名知意” %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin %JAVA_HOME%\bin; %JAVA_HOME%\jre\bin; 上面的路径中存放的则是小Java的具体信息，比如：身高，体重，三围。 对的，公安局才是查户口的。 可以打开jdk的安装目录，你可以看到bin目录还有jre目录与jre目录下有一个bin目录。 做到这里 环境变量还差一步就搭建好了。 我们需要最后建立一个名为：ClassPath 的系统环境变量，下面那一行的路径可以看作是小Java为我们做事时需要使用的工具。 它们分别是 tools.jar、dt.jar 可以在jdk的安装路径中找到这两个文件。注意：这个环境变量有点特殊，细心的同学可以发现在变量值中路径值的前面还有两个英文的符号 .; 记得要加上哦：） 耐得住寂寞，才能享受繁华。 开源改变世界，分享成就梦想 转载注明公众号出处 【本文由“讲编程账号”发布，2017年11月25日】]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>环境变量</tag>
        <tag>PATH</tag>
        <tag>教学</tag>
        <tag>千里之行</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[编程入门]]></title>
    <url>%2F2017%2F11%2F04%2F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[这篇文章是特地为对编程有兴趣的同学特意准备的，非战斗人员请速速撤离。 ０.选择一门编程语言 选择语言的话不需要纠结太多（但是不推荐易语言之流：），因为编程语言都是大同小异。并且在你精通一门语言之后再去学另一种编程语言时，你会发现卧槽要死要死，这么简单。 如果你选择纠结症特别严重的话，那么我推荐你可以从C语言开始你的编程人生。我当初也是通过C语言入门的，这里面有很多故事以后在谈。扯回来，C语言是一门古老的语言。并且是一门面向过程的结构化语言。JAVA、C#、Ｃ＋＋都诞生在其之后。所以选择C语言入门是你学习编程思想的不二之选。 １.确定好语言之后的学习路线 学习路线我不建议你去购买 ”入门到精通“ 之流的书籍。因为你购买到手之后你会发现 –我擦，这么厚？看到书的那一刻无形之中有股沉重感在心头蔓延~ 推荐你上网搜索题目进行实践。编程这种事情，在书本上看十遍不如实际动手操作一遍。推荐的网站有：【开源中国】、【实验楼】、【CSDN】；这些网站都是非常友好的。编译器等等PDF随便一搜就有。在我的公众号上面也有之前我学习过程中收集的题目、视频、PDF，都是已经打包好了的。你可以通过回复 [ 资料 ] 获取。 ２.学习过程中可能遇到的问题 其实，说到学习过程中遇到的问题。我很关心的是你们是否会产生想要放弃的想法。我想对你们说的是：学习这件事，最怕的就是三分钟热度。很多时候并不是你不行，而是你不想！有明确目标的人即使产生厌倦感也能够很快的找回状态。所有，我希望你们扪心自问是否有明确的目标？ 如果是编程方面所遇到的难题，你可以上博客网站、论坛上去发帖留言，向大牛请教。当然，我也很乐意为你解决难题。在程序员这个行业，虽然很多人都看起来很呆萌。但其实你接触久了之后你会发现－－其实就是一群闷骚的都比：P 说回来，网络中的资料杂七杂八，质量内容也是参差不齐的。在一定程度上学习资料会影响你的知识汲取速度。编程很简单，不要给自己设限。其实没什么大不了的。就和小学算数一样； 记住，光看不练不行动是永远得不到结果的。不要想太多，直接动手实操就是最有效的学习！ 遇到了难题，不要气馁。换一种思维，遇到了难题说明提升实力的时候来临了。你这次将这个难题解决后技术不是得到了进步？当下次，别人也同样遇到了相同的问题，这不是你装比的机会？ : ) 很多时候思维决定你的高度。 ３.编程的前瞻 我们现在所处的时代，遍地都是机会。对我个人而言，赶上了这个时代我觉得非常幸福！人工智能的崛起，各路行业大佬各显神通，在未来的几年中，所有的行业都会向智能化靠近。并且相对的很多传统行业都面临着失业的危险，人工智能将替代单一而重复的工作。 而人工智能的崛起，程序员必将极度紧缺。所以，这个行业的前途会暗淡吗？ 图片截取自TIOBE编程语言排行榜 2017年 - 11月]]></content>
      <categories>
        <category>教学</category>
      </categories>
      <tags>
        <tag>教学</tag>
        <tag>编程</tag>
        <tag>C</tag>
      </tags>
  </entry>
</search>
