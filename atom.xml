<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rbuli&#39;s Notes</title>
  
  <subtitle>又起秋风🍂</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cssmini.com/"/>
  <updated>2018-06-22T04:16:03.581Z</updated>
  <id>http://cssmini.com/</id>
  
  <author>
    <name>rbuli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue学习笔记</title>
    <link href="http://cssmini.com/2018/06/20/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://cssmini.com/2018/06/20/vue学习笔记/</id>
    <published>2018-06-20T11:02:12.000Z</published>
    <updated>2018-06-22T04:16:03.581Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p6wzlnrcf.bkt.clouddn.com//blogimg/ltn_8d57e363795eed710e628194cff447b720140710120059.jpeg" alt="image"></p><p>学习资源：<a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">vue中文文档</a></p><blockquote><p>本文绝大部分资料摘录自Vue官方文档，目的是方便日后查阅与回顾。</p></blockquote><hr><h2 id="Vue-js是什么"><a href="#Vue-js是什么" class="headerlink" title="Vue.js是什么"></a>Vue.js是什么</h2><p>&emsp;&emsp;Vue是一套用于构建用户界面的 <strong>渐进式框架</strong>。Vue被设计为可以自底向上逐层应用。Vue的核心库只关注视图层，不仅仅易于上手，还便于与第三方库或既有项目整合。<br><a id="more"></a><br>&emsp;&emsp;Vue专注于渲染/更新非常简单的组件树的真实性能。组件的依赖是在渲染过程中自动追踪的。</p><p>&emsp;&emsp;<strong>Vue整体思想</strong>：拥抱经典的Web技术，并在其上进行扩展。(看似贼深奥，其实就是说摈弃以往web技术的短板，吸纳好的方面，并站在巨人的肩膀上前行)</p><p>&emsp;&emsp;Vue还贴心的提供了<a href="https://github.com/vuejs/vue-cli" target="_blank" rel="noopener">Vue-cli脚手架</a>，方便我们快速地构建项目。</p><p>&emsp;&emsp;只需一条demo即可立即体验Vue开发的乐趣。（当然前提是你阅读了官方文档 /调皮脸）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>以上内容摘录自 <strong>Vue官方文档</strong></p></blockquote><p><strong>附言：</strong></p><p>&emsp;&emsp;优点很多，但只有动手尝试过才能有真正体会，立即打开官方文档进行尝试吧~<br>（不得不感慨一下，Vue的官方文档做得是真的很友好）</p><h2 id="创建一个Vue实例"><a href="#创建一个Vue实例" class="headerlink" title="创建一个Vue实例"></a>创建一个Vue实例</h2><blockquote><p>所有的Vue组件都是Vue实例，并且接受相同的选项对象。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//数据与方法</span><br><span class="line">//我们的数据对象</span><br><span class="line">var data = &#123; a: 1 &#125;</span><br><span class="line"></span><br><span class="line">//该对象被加入到一个Vue实例中</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">data: data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//获取这个实例上的属性</span><br><span class="line">//返回源数据中对应的字段</span><br><span class="line">//alert(vm.a == data.a); =&gt; true</span><br><span class="line"></span><br><span class="line">//设置属性也会影响到原始数据</span><br><span class="line">//alert(&apos;vm.a: &apos;+vm.a +&apos;  --  data.a: &apos;+data.a)</span><br><span class="line"></span><br><span class="line">vm.a = 2;</span><br><span class="line">//vm.a 与 data.a 都改变了（引用传递）</span><br><span class="line">//alert(&apos;vm.a: &apos;+vm.a +&apos;  --  data.a: &apos;+data.a)</span><br><span class="line">data.a = 3;</span><br><span class="line">//同样改变</span><br><span class="line">//alert(&apos;vm.a: &apos;+vm.a +&apos;  --  data.a: &apos;+data.a)</span><br></pre></td></tr></table></figure><p>以上所有操作都会得到即时响应，但是如果插入的值，不是在一开始就声明好的（例如上面的 data.a 属性），则不支持及时响应。</p><p>实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//我们在控制台向 data对象 添加一个新属性</span><br><span class="line">data.b = &apos;hi&apos;</span><br></pre></td></tr></table></figure></p><p>这样的操作不能得到及时响应</p><p><strong>解决办法：</strong> 在创建时即声明好，在晚些时候会使用到的字段并赋初始值。</p><h2 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h2><h3 id="以文本的方式插入"><a href="#以文本的方式插入" class="headerlink" title="以文本的方式插入"></a>以文本的方式插入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//当mes的值被改变时，所有存在mes引用的位置，都将被即时更新</span><br><span class="line">&lt;span&gt;message: &#123;&#123; mes &#125;&#125;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">//执行一次性地插值</span><br><span class="line">&lt;span v-once&gt;这个将不会改变： &#123;&#123; mes &#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure><h3 id="插入原始html"><a href="#插入原始html" class="headerlink" title="插入原始html"></a>插入原始html</h3><p>&emsp;&emsp;双括号会将数据解释为普通文本，而不是html代码。输出html需要使用 <strong>v-html</strong> 指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Using mustaches: &#123;&#123; rawHtml &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Using v-html directive:&lt;span v-html=&quot;rawHtml&quot;&gt;&lt;/span&gt;&lt;p&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>&emsp;&ensp;感想：其实就是text()方法与html()地使用</p></blockquote><h2 id="使用JavaScript表达式"><a href="#使用JavaScript表达式" class="headerlink" title="使用JavaScript表达式"></a>使用JavaScript表达式</h2><p>&emsp;&emsp;Vue.js提供了完全地Javascript表达式支持。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; number + 1 &#125;&#125;</span><br><span class="line">&#123;&#123; ok ? &apos;YES&apos; : &apos;NO&apos; &#125;&#125;</span><br><span class="line">&#123;&#123; message.split(&apos;&apos;).reverse().join(&apos;&apos;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;div v-bind:id=&quot;&apos;list-&apos; + id&quot;&gt;  &lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;但每个绑定都只能包含单个表达式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--这是语句，不是表达式--&gt;</span><br><span class="line">&#123;&#123; var a = 1 &#125;&#125;</span><br><span class="line">&lt;!-- 控制流也不会生效，可用三元表达式替代--&gt;</span><br><span class="line">&#123;&#123; if(ok)&#123;return message&#125; &#125;&#125;</span><br></pre></td></tr></table></figure></p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>&emsp;&emsp;指令是带有 v- 前缀地特殊特性。它的预期是<strong>单个JavaScript表达式</strong>。职责是，当表达式地值改变时，将其产生的连带影响，响应式地作用于DOM。</p><blockquote><p>&emsp;&emsp;感想：和EL、JSTL的思想大同小异，表现形式不同而已。</p></blockquote><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>&emsp;&emsp;有些指令能够接收一个 “参数”，在指令名称之后以冒号表示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//例如用于响应式更新html</span><br><span class="line">&lt;a v-bind:href=&quot;url&quot;&gt;...&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;上面的 href 参数，使得 v-bind 指令将 <a> 标签的 href 的 url 进行绑定，可以实现动态改变该标签的跳转地址。</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a v-on:click=&quot;doSomething&quot;&gt;...&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;上面的指令 v-on 用于监听DOM事件。</p><h2 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h2><p>&emsp;&emsp;Vue.js给 v-bind 和 v-on 这两个最常用的指令，提供了特点简写。</p><h3 id="v-bind-缩写"><a href="#v-bind-缩写" class="headerlink" title="v-bind 缩写"></a>v-bind 缩写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--完整语法--&gt;</span><br><span class="line">&lt;a v-ding:href=&quot;url&quot;&gt;...&lt;/a&gt;</span><br><span class="line">&lt;!--缩写--&gt;</span><br><span class="line">&lt;a :href=&quot;url&quot;&gt;...&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="v-on-缩写"><a href="#v-on-缩写" class="headerlink" title="v-on 缩写"></a>v-on 缩写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--完整语法--&gt;</span><br><span class="line">&lt;a v-on:click=&quot;doSomething&quot;&gt;...&lt;/a&gt;</span><br><span class="line">&lt;!--缩写--&gt;</span><br><span class="line">&lt;a @click=&quot;doSomething&quot;&gt;...&lt;/a&gt;</span><br></pre></td></tr></table></figure><blockquote><p>p.s：再次声明这不叫偷懒，这叫理性提高工作效率 /笑</p></blockquote><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p> &emsp;&emsp;在我们需要get元素属性之前，可以对这个属性进行操作，当我们拿到的就是经过特殊处理后的数据。</p><p> &emsp;&emsp;由于是引用自源数据，所有当源数据被改变时，计算属性也会随之改变。（getter）</p><p> <strong>实例：</strong><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!--index.js--&gt;</span><br><span class="line"> var vm = new Vue(&#123;</span><br><span class="line">el: &apos;#example&apos;,</span><br><span class="line">data: &#123;</span><br><span class="line">message: &apos;hello 你好&apos;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">//计算属性的getter</span><br><span class="line">reversedMessage:function()&#123;</span><br><span class="line">//this 指向 vm 实例</span><br><span class="line">return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;!--index.html--&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;example&quot;&gt;</span><br><span class="line">&lt;p&gt;Original message: &quot;&#123;&#123; message &#125;&#125;&quot;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Conputed reversed message: &quot;&#123;&#123; reversedMessage&#125;&#125;&quot;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p> <strong>结果：</strong><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> Original message: &quot;hello 你好&quot;</span><br><span class="line"></span><br><span class="line">Conputed reversed message: &quot;好你 olleh&quot;</span><br></pre></td></tr></table></figure></p><blockquote><p>感想：可以看作是java中的字段封装，因为<strong>计算属性</strong> 同样存在  getter 与 setter 的表现形式。好玩的东西很多。</p></blockquote><h2 id="一点骚操作"><a href="#一点骚操作" class="headerlink" title="一点骚操作"></a>一点骚操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line">    render: h =&gt; h(App)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">等价于</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line">    render: function(h)&#123;</span><br><span class="line">        return h(App)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line">取反</span><br><span class="line"></span><br><span class="line">var flag = true;</span><br><span class="line">flag = ! falg;</span><br></pre></td></tr></table></figure><blockquote><p>按照官方文档一路打下来，觉得有些概念还是挺模糊的，后来配合网上的教程一起进行学习，动手做个小项目下来基本的都能掌握。</p></blockquote><blockquote class="blockquote-center"><p>纸上得来终觉浅，绝知此事要躬行。 </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6wzlnrcf.bkt.clouddn.com//blogimg/ltn_8d57e363795eed710e628194cff447b720140710120059.jpeg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;学习资源：&lt;a href=&quot;https://cn.vuejs.org/v2/guide/installation.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue中文文档&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文绝大部分资料摘录自Vue官方文档，目的是方便日后查阅与回顾。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Vue-js是什么&quot;&gt;&lt;a href=&quot;#Vue-js是什么&quot; class=&quot;headerlink&quot; title=&quot;Vue.js是什么&quot;&gt;&lt;/a&gt;Vue.js是什么&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;Vue是一套用于构建用户界面的 &lt;strong&gt;渐进式框架&lt;/strong&gt;。Vue被设计为可以自底向上逐层应用。Vue的核心库只关注视图层，不仅仅易于上手，还便于与第三方库或既有项目整合。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://cssmini.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue.js" scheme="http://cssmini.com/tags/Vue-js/"/>
    
      <category term="前端" scheme="http://cssmini.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="学习" scheme="http://cssmini.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>vue开发环境搭建</title>
    <link href="http://cssmini.com/2018/06/20/vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://cssmini.com/2018/06/20/vue开发环境搭建/</id>
    <published>2018-06-20T04:31:51.000Z</published>
    <updated>2018-06-22T03:58:39.426Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p6wzlnrcf.bkt.clouddn.com/ltn_ea1e78ffd594738061ee75092a4e342b20140710115942.jpeg" alt="image"></p><h2 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git --version</span><br><span class="line">git version 2.14.3.windows.1</span><br></pre></td></tr></table></figure><h2 id="安装-node-js"><a href="#安装-node-js" class="headerlink" title="安装 node.js"></a>安装 node.js</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm -v</span><br><span class="line">3.10.10</span><br></pre></td></tr></table></figure><a id="more"></a><hr><p>&emsp;&emsp;右键打开git（打开cmd也可以）</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/%E5%8F%B3%E9%94%AE%E6%89%93%E5%BC%80git.png" alt="image"></p><h2 id="检查版本"><a href="#检查版本" class="headerlink" title="检查版本"></a>检查版本</h2><ol><li>检查 git 版本：git –version</li><li>检查 npm 版本：npm -v （需要在6.9以上）</li><li>检查 node 版本：node -v （需要在3.10以上）</li></ol><p><img src="http://p6wzlnrcf.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20180620100834.png" alt="image"></p><h2 id="安装-vue"><a href="#安装-vue" class="headerlink" title="安装 vue"></a>安装 vue</h2><p>&emsp;&emsp;输入命令： npm install –global vue-cli<br><img src="http://p6wzlnrcf.bkt.clouddn.com/TIM%E5%9B%BE%E7%89%8720180620101006.png" alt="image"><br>安装完成后检查版本：vue –version</p><blockquote><p>到这里vue开发的基础环境即搭建完毕。下面我们尝试创建个vue项目试试 :)</p></blockquote><h2 id="开始第一个vue项目"><a href="#开始第一个vue项目" class="headerlink" title="开始第一个vue项目"></a>开始第一个vue项目</h2><p>&emsp;&emsp;首先在磁盘中创建一个用来存放我们的vue项目的文件夹，然后 cd 到我们所建的文件夹中（我建的文件夹叫做 ‘vue’）</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20180620103520.png" alt="image"></p><p>&emsp;&emsp;创建项目输入：vue init webpack my-project</p><p>&emsp;&emsp;输入命令之后，将自动创建一个基于webpack模板的新项目，在这一过程中会要求你为这个新项目设置一些基础配置（项目名，作者等等），配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">rbuli@service MINGW64 /g/vue</span><br><span class="line">$ vue init webpack my-project</span><br><span class="line"></span><br><span class="line">? Project name (my-project) hellovue</span><br><span class="line">? Project name hellovue</span><br><span class="line">? Project description (A Vue.js project) myvueproject</span><br><span class="line">? Project description myvueproject</span><br><span class="line">? Author (rbuli &lt;xinleiwork@126.com&gt;)</span><br><span class="line">? Author rbuli &lt;xinleiwork@126.com&gt;</span><br><span class="line">? Vue build standalone</span><br><span class="line">? Install vue-router? (Y/n) y</span><br><span class="line">? Install vue-router? Yes</span><br><span class="line">? Use ESLint to lint your code? (Y/n) n</span><br><span class="line">? Use ESLint to lint your code? No</span><br><span class="line">? Set up unit tests (Y/n) n</span><br><span class="line">? Set up unit tests No</span><br><span class="line">? Setup e2e tests with Nightwatch? (Y/n) n</span><br><span class="line">? Setup e2e tests with Nightwatch? No</span><br><span class="line">? Should we run `npm install` for you after the project has been created? (recom</span><br><span class="line">? Should we run `npm install` for you after the project has been created? (recom</span><br><span class="line">mended) npm</span><br><span class="line"></span><br><span class="line">   vue-cli · Generated &quot;my-project&quot;.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Installing project dependencies ...</span><br><span class="line"># ========================</span><br></pre></td></tr></table></figure><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>&emsp;&emsp;cd my-project(打开目录)</p><p>&emsp;&emsp;npm install (安装依赖)</p><blockquote><p>p.s:如果上面出现了“? Should we run <code>npm install</code> for you after the project has been created? (recom<br>mended” 则不需要执行这条命令</p></blockquote><h2 id="启动你的第一个vue程序"><a href="#启动你的第一个vue程序" class="headerlink" title="启动你的第一个vue程序"></a>启动你的第一个vue程序</h2><p>&emsp;&emsp;npm run dev (运行)</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20180620104930.png" alt="image"></p><p>&emsp;&emsp;等待启动完成</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20180620105244.png" alt="image"></p><p>&emsp;&emsp;使用浏览器访问项目地址： <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> （默认地址）</p><p>&emsp;&emsp;hello,vue :)</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20180620105454.png" alt="image"></p><p>&emsp;&emsp;开始你的vue之旅！</p><h2 id="一些vue开发的配置"><a href="#一些vue开发的配置" class="headerlink" title="一些vue开发的配置"></a>一些vue开发的配置</h2><ol><li>使用 VSCode 进行vue开发<a href="https://note.youdao.com/" target="_blank" rel="noopener">vscode 传送门</a>，点击连接选择适合你的版本进行下载安装。</li></ol><p><img src="http://p6wzlnrcf.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20180620110606.png" alt="image"></p><ol start="2"><li>安装插件</li></ol><p>&emsp;&emsp;&emsp;&emsp;打开 VSCode<br>&emsp;&emsp;输入组合键：Ctrl + P<br>&emsp;&emsp;输入：ext install vetur</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20180620111120.png" alt="image"></p><p>&emsp;&emsp;回车</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20180620111229.png" alt="image"></p><p>&emsp;&emsp;安装完成后还需要进行一点配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;emmet.syntaxProfiles&quot;: &#123;</span><br><span class="line">  &quot;vue-html&quot;: &quot;html&quot;,</span><br><span class="line">  &quot;vue&quot;: &quot;html&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;打开 Settings.json:</p><p>&emsp;&emsp;左上角单击 文件 &gt;&gt; 首选项 &gt;&gt; 设置</p><p>&emsp;&emsp;直接粘贴上去保存关闭就ok了</p><blockquote><p>以上是安装插件的示例。</p></blockquote><blockquote><p>ps:贼麻烦，最后我继续使用<a href="http://www.dcloud.io/" target="_blank" rel="noopener">HBulider</a>进行开发:P HBuilder用了就不回去了 /感动得哭泣</p></blockquote><p><a href="https://blog.csdn.net/win7583362/article/details/79315055/" target="_blank" rel="noopener">可以参考这一篇博文，进行vscode插件的安装和配置。</a></p><p><a href="https://www.cnblogs.com/PopularProdigal/p/7305234.html" target="_blank" rel="noopener">参考这篇文章进行vue开发相关插件的安装与配置</a></p><p><strong>资料参考链接：</strong></p><p><a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">Vue.js</a></p><p><a href="https://blog.csdn.net/frank_fong/article/details/79138657" target="_blank" rel="noopener">Vue.js脚手架安装</a></p><p><a href="https://www.cnblogs.com/PopularProdigal/p/7305234.html" target="_blank" rel="noopener">优雅地使用 VSCode 来编辑 vue 文件优雅地使用 VSCode 来编辑 vue 文件</a></p><p><a href="https://segmentfault.com/a/1190000011275993" target="_blank" rel="noopener">Vue2.0 搭建Vue脚手架（vue-cli）</a></p><p><a href="https://blog.csdn.net/u013304372/article/details/78917536" target="_blank" rel="noopener">VS Code使用之基本设置与配置详解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6wzlnrcf.bkt.clouddn.com/ltn_ea1e78ffd594738061ee75092a4e342b20140710115942.jpeg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装-git&quot;&gt;&lt;a href=&quot;#安装-git&quot; class=&quot;headerlink&quot; title=&quot;安装 git&quot;&gt;&lt;/a&gt;安装 git&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git --version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git version 2.14.3.windows.1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;安装-node-js&quot;&gt;&lt;a href=&quot;#安装-node-js&quot; class=&quot;headerlink&quot; title=&quot;安装 node.js&quot;&gt;&lt;/a&gt;安装 node.js&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm -v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.10.10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端" scheme="http://cssmini.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue.js" scheme="http://cssmini.com/tags/Vue-js/"/>
    
      <category term="前端" scheme="http://cssmini.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="学习" scheme="http://cssmini.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>快速掌握一门新的编程语言</title>
    <link href="http://cssmini.com/2018/05/26/%E5%BF%AB%E9%80%9F%E6%8E%8C%E6%8F%A1%E4%B8%80%E9%97%A8%E6%96%B0%E7%9A%84%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    <id>http://cssmini.com/2018/05/26/快速掌握一门新的编程语言/</id>
    <published>2018-05-26T11:21:11.000Z</published>
    <updated>2018-06-22T04:03:37.748Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p6wzlnrcf.bkt.clouddn.com//blogimg/ltn_781d1773fd479c336a0e021963c4d9b920140710121257.jpeg" alt="image"></p><a id="more"></a><p>1.熟悉语言背后的故事，比如优缺点，特性等(只需要了解大概就差不多了)。</p><p>2.熟悉语言的运算符和表达式</p><p>3.常量和变量的声明</p><p>4.了解命名规则</p><p>5.了解注释的使用</p><p>6.了解数据类型</p><p>7.掌握语言有哪些控制语句（无非就是顺序、选择、循环等）</p><p>8.异常处理</p><p>9.语言独有的特点</p><p>10.语言环境搭建</p><p>11.常用的ide</p><p>12.代码编写规范</p><p>根据以上的总结，我实践学习了PL/SQL</p><h1 id="1-熟悉语言背后的故事，比如优缺点，特性等-只需要了解大概就差不多了-。"><a href="#1-熟悉语言背后的故事，比如优缺点，特性等-只需要了解大概就差不多了-。" class="headerlink" title="1.熟悉语言背后的故事，比如优缺点，特性等(只需要了解大概就差不多了)。"></a>1.熟悉语言背后的故事，比如优缺点，特性等(只需要了解大概就差不多了)。</h1><p>&emsp;&emsp;PL/SQL(Procedural Language/SQL ,过程语言/SQL)是结合了Oracle过程语言和结构化查询语言（SQL）的一种扩展语言。使用PL/SQL可以编写具有很多高级功能的程序，虽然通过多个sql语句也能实现同样的功能，但是相比而言，PL/SQL具有更为明显的一些优点。（百度上面都有，就不赘述了）</p><h1 id="2-熟悉语言的运算符和表达式"><a href="#2-熟悉语言的运算符和表达式" class="headerlink" title="2.熟悉语言的运算符和表达式"></a>2.熟悉语言的运算符和表达式</h1><p>PS:搜索了一下，就是些通用的运算符.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">关系运算符：</span><br><span class="line">    =                               // 等于</span><br><span class="line">    &lt;&gt;,!=,~=,^=                     // 不等于</span><br><span class="line">    &lt;                               // 小于</span><br><span class="line">    &gt;                               // 大于</span><br><span class="line">    &lt;=                              // 小于等于</span><br><span class="line">    &gt;=                              // 大于等于</span><br><span class="line">    </span><br><span class="line">一般运算符：</span><br><span class="line">    +                               // 加号</span><br><span class="line">    -                               // 减号</span><br><span class="line">    *                               // 乘号</span><br><span class="line">    /                               // 除号</span><br><span class="line">    :=                              // 赋值号</span><br><span class="line">    =&gt;                              // 关系号</span><br><span class="line">    ..                              // 范围运算符</span><br><span class="line">    ||                              // 字符连接符</span><br><span class="line">逻辑运算符：</span><br><span class="line">    IS NULL                         // 是空值   </span><br><span class="line">    BETWEEN AND                     // 介于两者之间</span><br><span class="line">    IN                              // 在一列值之间</span><br><span class="line">    AND                             // 与</span><br><span class="line">    OR                              // 或</span><br><span class="line">    NOT                             // 取反</span><br></pre></td></tr></table></figure></p><h1 id="3-常量和变量的声明"><a href="#3-常量和变量的声明" class="headerlink" title="3.常量和变量的声明"></a>3.常量和变量的声明</h1><p>&emsp;&emsp;在PL/SQL块的可执行部分引用变量和常量前，必须先进行声明。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//声明变量的语法：</span><br><span class="line">    variable_name data_type[(size)] [:=init_value];</span><br><span class="line">/*</span><br><span class="line">在语法中：</span><br><span class="line">    1.variable_name表示变量名称</span><br><span class="line">    2.data_type表示变量的SQL或/PL/SQL数据类型</span><br><span class="line">    3.size是指定变量的范围</span><br><span class="line">    4.init_value指的是变量的初始值</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">//声明常量的语法：</span><br><span class="line">    variable_name CONSTANT data_type := value;</span><br><span class="line">/*</span><br><span class="line">PL/SQL程序设计中的标识符定义与SQL的标识符定义的要求相同，要求与限制如下：</span><br><span class="line">    1.标识符名不能超过30个字符</span><br><span class="line">    2.第一个字符必须为字母</span><br><span class="line">    3.不区分大小写</span><br><span class="line">    4.不能用 “-” 减号</span><br><span class="line">    5. 不能是SQL保留字</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></p><h1 id="4-了解命名规则"><a href="#4-了解命名规则" class="headerlink" title="4.了解命名规则"></a>4.了解命名规则</h1><h1 id="【假装有张变量命名方法表】"><a href="#【假装有张变量命名方法表】" class="headerlink" title="【假装有张变量命名方法表】"></a>【假装有张变量命名方法表】</h1><p>根据上图可以很清楚的了解PL/SQL的命名规范</p><h1 id="5-了解注释的使用"><a href="#5-了解注释的使用" class="headerlink" title="5.了解注释的使用"></a>5.了解注释的使用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">两种方式：</span><br><span class="line">    1. 使用双减号 ‘ -- ’加注释（单行注释）</span><br><span class="line">    2. 使用 ‘ /* 我是注释 */ ’加注释 （多行注释）</span><br></pre></td></tr></table></figure><h1 id="6-了解数据类型"><a href="#6-了解数据类型" class="headerlink" title="6.了解数据类型"></a>6.了解数据类型</h1><p>百度查了一波，粗略总结，共有三大类：</p><ul><li>标量数据类型</li><li>LOB数据类型</li><li>属性类型</li></ul><h1 id="7-掌握语言有哪些控制语句"><a href="#7-掌握语言有哪些控制语句" class="headerlink" title="7.掌握语言有哪些控制语句"></a>7.掌握语言有哪些控制语句</h1><p>&emsp;&emsp;PL/SQL程序可通过控制结构来控制命令执行的流程。标准的SQL没有流程控制的概念，而PL/SQL提供了丰富的流程控制语句。</p><p>&emsp;&emsp;控制结构共有三种类型，具体包括条件控制，循环控制和顺序控制。</p><h2 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    1.条件控制，条件控制包括两个 IF 语句和 CASE 语句</span><br><span class="line">*/</span><br><span class="line">//if语句语法：</span><br><span class="line">    IF &lt;布尔表达式&gt; THEN</span><br><span class="line">        PL/SQL 和 SQL语句</span><br><span class="line">    END IF;</span><br><span class="line">    ----------------</span><br><span class="line">    IF &lt;布尔表达式&gt; THEN</span><br><span class="line">        PL/SQL 和 SQL 语句</span><br><span class="line">    ELSE</span><br><span class="line">        其他语句</span><br><span class="line">    END IF;</span><br><span class="line">    ---------------</span><br><span class="line">    IF &lt;布尔表达式&gt; THEN</span><br><span class="line">        PL/SQL 和 SQL 语句</span><br><span class="line">    ELSIF &lt;其他布尔表达式&gt; THEN</span><br><span class="line">        其他语句</span><br><span class="line">    ELSIF &lt;其他布尔表达式&gt; THEN</span><br><span class="line">        其他语句</span><br><span class="line">    ELSE</span><br><span class="line">        其他语句</span><br><span class="line">    END IF;</span><br><span class="line">    //else if 有点另类这里要写成 elsif</span><br><span class="line"></span><br><span class="line">//CASE 语句语法：</span><br><span class="line">    ----------------</span><br><span class="line">    CASE 条件表达式</span><br><span class="line">        WHEN 条件表达式结果1 THEN</span><br><span class="line">            语句段1</span><br><span class="line">        WHEN 条件表达式结果2 THEN</span><br><span class="line">            语句段2</span><br><span class="line">        ...</span><br><span class="line">        WHEN 条件表达式结果n THEN</span><br><span class="line">            语句段n</span><br><span class="line">        [ELSE 语句段]</span><br><span class="line">    END CASE;</span><br><span class="line">    </span><br><span class="line">    --------------</span><br><span class="line">    CASE</span><br><span class="line">        WHEN 条件表达式1 THEN</span><br><span class="line">            语句段1</span><br><span class="line">        WHEN 条件表达式2 THEN</span><br><span class="line">            语句段2</span><br><span class="line">        ...</span><br><span class="line">        WHEN 条件表达式n THEN</span><br><span class="line">            语句段n</span><br><span class="line">        [ELSE 语句段]</span><br><span class="line">    END CASE;</span><br></pre></td></tr></table></figure><h2 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    2.循环共有三种类型，包括 LOOP 循环，WHILE 循环和 FOR循环。</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">//LOOP循环语法:</span><br><span class="line">    LOOP</span><br><span class="line">        要执行的语句;</span><br><span class="line">        EXIT WHEN &lt;条件语句&gt; --条件满足，退出循环语句</span><br><span class="line">    END LOOP;</span><br><span class="line">    </span><br><span class="line">//WHILE 循环语法：</span><br><span class="line">    WHILE &lt;布尔表达式&gt; LOOP</span><br><span class="line">        要执行的语句;</span><br><span class="line">    END LOOP;</span><br><span class="line">    </span><br><span class="line">//FOR 循环语法</span><br><span class="line">    FOR 循环计数器 IN [REVERSE] ... 上限 LOOP</span><br><span class="line">        要执行的语句；</span><br><span class="line">    END LOOP;</span><br></pre></td></tr></table></figure><h2 id="顺序控制"><a href="#顺序控制" class="headerlink" title="顺序控制"></a>顺序控制</h2><p>&emsp;&emsp;顺序控制用于按顺序执行语句。顺序控制包括NULL语句和GOTO语句。GOTO 语句不推荐使用。</p><p>&emsp;&emsp;NULL语句：NULL语句是一个可执行语句，相当于一个占位符或不执行任何操作的空语句，可以使得某些语句变得有完整性，提供程序的可读性，保证其他语句结构的完整性和正确性。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6wzlnrcf.bkt.clouddn.com//blogimg/ltn_781d1773fd479c336a0e021963c4d9b920140710121257.jpeg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="SQL" scheme="http://cssmini.com/categories/SQL/"/>
    
    
      <category term="随笔" scheme="http://cssmini.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="编程" scheme="http://cssmini.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="PL/SQL" scheme="http://cssmini.com/tags/PL-SQL/"/>
    
  </entry>
  
  <entry>
    <title>什么是单例模式</title>
    <link href="http://cssmini.com/2018/05/16/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://cssmini.com/2018/05/16/什么是单例模式/</id>
    <published>2018-05-16T14:13:06.000Z</published>
    <updated>2018-06-22T03:46:21.859Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p6wzlnrcf.bkt.clouddn.com/%E5%A4%8F%E7%9B%AE%E5%8F%8B%E4%BA%BA%E5%B8%90asdasdasdasd.gif" alt="image"></p><p>&emsp;&emsp;单例模式，顾名思义就是程序在运行的过程中，有且只有一个实例。它必须满足三个关键点。</p><p>&emsp;&emsp;1）一个类只有一个实例。这是满足单例模式最基本的要求，若要满足这个关键点，只能提供私有的构造器，即保证不能随意创建该类的实例。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class ConfigManager &#123;</span><br><span class="line">private static ConfigManager configManager;</span><br><span class="line">//私有构造器-读取数据库配置文件</span><br><span class="line">private ConfigManager()&#123;</span><br><span class="line">String configFile = &quot;database.properties&quot;;</span><br><span class="line">properties = new Properties();</span><br><span class="line">InputStream is = </span><br><span class="line">ConfigManager.class.getClassLoader().getResourceAsStream(configFile);</span><br><span class="line">try &#123;</span><br><span class="line">properties.load(is);</span><br><span class="line">is.close();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;在上述代码中，我们把读取配置文件的I/O操作代码放入私有构造器里，这样可以有效地保证I/O操作在整个系统运行期间仅被执行一次，以解决资源消耗问题。</p><p>&emsp;&emsp;2）它必须自行创建这个实例。对于这一点，正是体现了：单例模式的“有且仅有一个实例”的这一特性。我们要保证唯一性，也就意味着必须要提供一个实例，那么就需要它自行创建，定义一个ConfigManager类型的静态的私有对象，以便向外界提供该类实例时使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//读取配置文件的工具类-单例模式</span><br><span class="line">public class ConfigManager &#123;</span><br><span class="line">private static ConfigManager configManager;</span><br><span class="line">private static Properties properties;</span><br><span class="line">//私有构造器-读取数据库配置文件</span><br><span class="line">private ConfigManager()&#123;</span><br><span class="line">String configFile = &quot;database.properties&quot;;</span><br><span class="line">properties = new Properties();</span><br><span class="line">InputStream is = </span><br><span class="line">ConfigManager.class.getClassLoader().getResourceAsStream(configFile);</span><br><span class="line">try &#123;</span><br><span class="line">properties.load(is);</span><br><span class="line">is.close();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;在上面的代码中，我们定义了一个ConfigManager的静态私有对象configManager。</p><p>&emsp;&emsp;3）它必须自行向整个系统提供这个实例。最后一点也是至关重要的，外界需要获取并使用这个单例类的实例，但是由于该类的构造器是私有的，外界无法通过new去获取它的实例，那么就必须提供一个静态的公有方法，该方法创建或者获取它本身的静态私有对象并返回。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//读取配置文件的工具类-单例模式</span><br><span class="line">public class ConfigManager &#123;</span><br><span class="line">private static ConfigManager configManager;</span><br><span class="line">private static Properties properties;</span><br><span class="line">//私有构造器-读取数据库配置文件</span><br><span class="line">private ConfigManager()&#123;</span><br><span class="line">String configFile = &quot;database.properties&quot;;</span><br><span class="line">properties = new Properties();</span><br><span class="line">InputStream is = </span><br><span class="line">ConfigManager.class.getClassLoader().getResourceAsStream(configFile);</span><br><span class="line">try &#123;</span><br><span class="line">properties.load(is);</span><br><span class="line">is.close();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//全局访问点</span><br><span class="line">public static ConfigManager getInstance()&#123;</span><br><span class="line">if(configManager == null)&#123;</span><br><span class="line">configManager = new ConfigManager();</span><br><span class="line">&#125;</span><br><span class="line">return configManager;</span><br><span class="line">&#125;</span><br><span class="line">//根据传入的key获取相应的value值</span><br><span class="line">public String getValue(String key)&#123;</span><br><span class="line">return properties.getProperty(key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在上面的代码中，我们添加了一个全局的访问点getInstance()方法，该方法返回该类的实例，以被外界使用。在该方法体内，进行了简单的逻辑判断，若configManager为null，那么创建该实例；若不为空，那么直接返回configManager实例即可，不需要再实例化该类的对象。</p><p>&emsp;&emsp;为什么要将getInstance（）方法定位为static呢？</p><p>&emsp;&emsp;因为作为该单例类的全局访问点，外界需要哦调用该方法来获取configManager方法，则该方法必须也是静态的，否则无法调用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6wzlnrcf.bkt.clouddn.com/%E5%A4%8F%E7%9B%AE%E5%8F%8B%E4%BA%BA%E5%B8%90asdasdasdasd.gif&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;单例模式，顾名思义就是程序在运行的过程中，有且只有一个实例。它必须满足三个关键点。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;1）一个类只有一个实例。这是满足单例模式最基本的要求，若要满足这个关键点，只能提供私有的构造器，即保证不能随意创建该类的实例。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>胡思乱想</title>
    <link href="http://cssmini.com/2018/05/14/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    <id>http://cssmini.com/2018/05/14/胡思乱想/</id>
    <published>2018-05-14T14:08:38.000Z</published>
    <updated>2018-06-22T03:42:30.276Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p6wzlnrcf.bkt.clouddn.com/wallhaven-641206.png" alt="image"></p><h1 id="关于智能手机"><a href="#关于智能手机" class="headerlink" title="关于智能手机"></a>关于智能手机</h1><p>&emsp;&emsp;近些年来智能手机的发展可谓是日新月异，无论是硬件方面来说，还是从软件方面。回想一下，12年、13年的时候，身边的朋友用的都还是带按键的手机，牛皮一点的是传说中的触屏（用指甲使劲戳几下就能选中）手机。功能上也就是打电话，最多带个QQ。总的来说没有跨出手机本身的意义。<a id="more"></a><br>&emsp;&emsp;记得是从13年左右的时候，智能手机出现在了中国大众的手中（依稀记得当时被炒上天的iPhone，一男子割肾只求一台iphone4s）笑，随着智能手机的发展，安卓迎来了一波春天。安卓平台上的app，尽力的满足着基数巨大的国民，只有想不到，没有做不到（毕竟流量即金钱）。微信、淘宝、短视频app、自媒体，从各个角度出发吸引着大众的眼球。触手可得的资讯、宝贵的知识，动动手指即可获得，不！手指都不需要动，即自动送到你的眼下。只求你的片刻停留。<br>&emsp;&emsp;在这样的环境下，产生了各种博人眼球的新兴词汇：知识焦虑、碎片化阅读、知识付费。产生这些词汇背后的本质是什么？获得你的停留，获取流量，继而获利。是的，有一小部分人获利了，根据2/8定律，获利的对象是那八成的大众。<br>&emsp;&emsp;大众是愚昧的，像一位皇帝一样被伺候着，被虚有的信息刺激着大脑多巴胺的分泌，获取着令大脑愉悦的快感。温水煮青蛙。使用虚拟的网络、朋友圈，装饰着虚幻的小我。时间久了变得分不清哪个才是真正的自我。<br>&emsp;&emsp;更加可怕的是这一代的小孩，从小就生活在这样虚无飘渺的世界中。<br>&emsp;&emsp;何以解忧？引用许嵩许多年前的写的歌词</p><blockquote class="blockquote-center"><p>放下客户端，立地成佛 </p></blockquote><h1 id="关于色"><a href="#关于色" class="headerlink" title="关于色"></a>关于色</h1><p>&emsp;&emsp;现中国环境下，随着网络的普及，弃前人之鉴而不顾。完全不知戒色为何物。<br><blockquote class="blockquote-center"><p>子曰：少之时，气血未定，戒之在色。<br>又有前人曰：二八佳人体似酥，腰间仗剑斩愚夫。 </p></blockquote><br>&emsp;&emsp;唾手可及的情色讯息，打开潘多拉盒子的现代中国，年轻一代深受茶毒。殊不知，精为人之本，发之华。<br>&emsp;&emsp;为着短暂的快感，而全然不顾根本。殊不知，所谓的快感，其实是毒药。<br>&emsp;&emsp;食与色，为人之本性。驾驭不了本性之人，与禽兽何异。<br>&emsp;&emsp;当局者迷旁观者清。跳出来，你能看到更美好的世界。</p><h1 id="关于阅读"><a href="#关于阅读" class="headerlink" title="关于阅读"></a>关于阅读</h1><p>&emsp;&emsp;阅读一事，实在有趣。白日清欢无它事，摇椅捧书笑偷闲。多少人迷失在所谓的阅读上面，以为可以寻到宝藏，还是太轻浮了。将心静下来，仔细想想宝藏在哪里？<br>&emsp;&emsp;书有消遣与教材之分（个人看法，欢迎探讨）。<br>&emsp;&emsp;千人千面，在消遣类的书籍中，不同的人都不同的感想和收获。这是强求不来的，有些书，人家说好，但是你读不进去，硬着头皮读下去，你也得不到什么。你选择书，书也在选择你。还不如洒脱的将其丢在一旁。等他日机遇到了自然会想起。<br>&emsp;&emsp;教材类书籍，才是你学习知识的宝贵财富。它讲述的是明确的内容，它所存在的意义就是将作者的知识记载下来，供世人消化、学习。自然，干货的汲取舒适度、速度肯定是不如消遣类书籍来得愉悦、来得迅速。但是这毕竟是实实在在的知识呀。<br>&emsp;&emsp;人天性就是追寻舒适。能掌控自己的人，属于少数。</p><h1 id="关于内心"><a href="#关于内心" class="headerlink" title="关于内心"></a>关于内心</h1><blockquote class="blockquote-center"><p>当局者迷旁观者清</p></blockquote><p>&emsp;&emsp;上面这句话，你真的懂吗？<br>&emsp;&emsp;人是由无数细胞组成的碳基生命体，细胞是新陈代谢的，也就是说，从理论上讲，你从出生到现在，实际上你的身体已经换了好几遍了。你还是你吗？<br>&emsp;&emsp;没错，你还是你，我现在是在和真正的你讲话。我口中的你，是你的思想本身。不用去别处寻找，你就是你。情绪、欲望、邪念都不是真的你。跳出来，你就是不一样的你。身体是客观存在的物体，而你（本我）才是旁观着这一切的旁观者。<br>&emsp;&emsp;嗯，时间不早了，就写到这里吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6wzlnrcf.bkt.clouddn.com/wallhaven-641206.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;关于智能手机&quot;&gt;&lt;a href=&quot;#关于智能手机&quot; class=&quot;headerlink&quot; title=&quot;关于智能手机&quot;&gt;&lt;/a&gt;关于智能手机&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;近些年来智能手机的发展可谓是日新月异，无论是硬件方面来说，还是从软件方面。回想一下，12年、13年的时候，身边的朋友用的都还是带按键的手机，牛皮一点的是传说中的触屏（用指甲使劲戳几下就能选中）手机。功能上也就是打电话，最多带个QQ。总的来说没有跨出手机本身的意义。
    
    </summary>
    
      <category term="随笔" scheme="http://cssmini.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://cssmini.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="胡思乱想" scheme="http://cssmini.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>乐理笔记</title>
    <link href="http://cssmini.com/2018/05/11/%E4%B9%90%E7%90%86%E5%9F%BA%E7%A1%80/"/>
    <id>http://cssmini.com/2018/05/11/乐理基础/</id>
    <published>2018-05-11T08:15:32.000Z</published>
    <updated>2018-06-22T03:45:33.324Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p6wzlnrcf.bkt.clouddn.com//blogimg/ltn_a44fb0ac1819347be4870144b54ad56e20140728115844.jpeg" alt="image"></p><h2 id="NO-1"><a href="#NO-1" class="headerlink" title="NO.1"></a>NO.1</h2><h3 id="emsp-emsp-什么是拍"><a href="#emsp-emsp-什么是拍" class="headerlink" title="&emsp;&emsp;什么是拍?"></a>&emsp;&emsp;什么是拍?</h3><blockquote><p>1 2 3 4 | 2 2 3 4 | 3 2 3 4。。。<br>这就是拍，一个数字就是一拍</p></blockquote><h3 id="emsp-emsp-什么是速度"><a href="#emsp-emsp-什么是速度" class="headerlink" title="&emsp;&emsp;什么是速度?"></a>&emsp;&emsp;什么是速度?</h3><blockquote><p>一分钟有多少拍<br><a id="more"></a></p></blockquote><h3 id="emsp-emsp-什么是小节"><a href="#emsp-emsp-什么是小节" class="headerlink" title="&emsp;&emsp;什么是小节?"></a>&emsp;&emsp;什么是小节?</h3><p>一定数量的拍，构成小节</p><h3 id="emsp-emsp-节拍-4-4"><a href="#emsp-emsp-节拍-4-4" class="headerlink" title="&emsp;&emsp;节拍 4/4"></a>&emsp;&emsp;节拍 4/4</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4   : 每小节有几拍（这里是每小节有四拍）</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">4   ：以几分音符为一拍（这里是以四分音符为一拍）</span><br></pre></td></tr></table></figure><h3 id="emsp-emsp-音符时值"><a href="#emsp-emsp-音符时值" class="headerlink" title="&emsp;&emsp;音符时值"></a>&emsp;&emsp;音符时值</h3><h2 id="NO-2"><a href="#NO-2" class="headerlink" title="NO.2"></a>NO.2</h2><h3 id="emsp-emsp-半音、全音"><a href="#emsp-emsp-半音、全音" class="headerlink" title="&emsp;&emsp;半音、全音"></a>&emsp;&emsp;半音、全音</h3><p>全全半全全全半</p><h3 id="emsp-emsp-什么是音名-唱名"><a href="#emsp-emsp-什么是音名-唱名" class="headerlink" title="&emsp;&emsp;什么是音名? 唱名?"></a>&emsp;&emsp;什么是音名? 唱名?</h3><h3 id="emsp-emsp-钢琴键盘命名"><a href="#emsp-emsp-钢琴键盘命名" class="headerlink" title="&emsp;&emsp;钢琴键盘命名"></a>&emsp;&emsp;钢琴键盘命名</h3><h2 id="NO-3"><a href="#NO-3" class="headerlink" title="NO.3 "></a>NO.3 </h2><h3 id="emsp-emsp-升号调、降号调"><a href="#emsp-emsp-升号调、降号调" class="headerlink" title="&emsp;&emsp;升号调、降号调"></a>&emsp;&emsp;升号调、降号调</h3><p>升号调：黑键用升调</p><p>降号调：黑键用降调</p><p>其中的公式: 全全半全全全半 (Q币：q q b q q q b )</p><p>&emsp;&emsp;音的稳定性</p><p>1 3 5 稳定</p><p>2 4 6 7 不稳定</p><p>&emsp;&emsp;音的倾向性</p><h3 id="存在的问题（笔记）"><a href="#存在的问题（笔记）" class="headerlink" title="存在的问题（笔记）"></a>存在的问题（笔记）</h3><ol><li>五线谱点看不准（特别是低音铺上面的音符）</li><li>不能熟练读出唱名，看到音名不能快速反应出对应的琴键</li><li>不知如何练习基本功</li><li>弹奏的时候，节奏不稳，跟不住节拍器 </li></ol><h3 id="一些思考"><a href="#一些思考" class="headerlink" title="一些思考"></a>一些思考</h3><p>1.学习的时候，特别是看视频的时候，将自己心中的问题，通过笔记记下来，然后将问题的解答，用自己的话写出来。</p><p>2.看视频的时候，如果有没有看懂的地方，一定要停下来，将问题搞明白，不然后面的学习，都将是无效输入。</p><p>3.弹奏的时候，将唱名同步读出来。</p><hr><p>学习来源：<br><a href="http://doyoudo.com/columns/musictheory#J_newsListNavBar" target="_blank" rel="noopener">doyoudo-乐理知识</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6wzlnrcf.bkt.clouddn.com//blogimg/ltn_a44fb0ac1819347be4870144b54ad56e20140728115844.jpeg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;NO-1&quot;&gt;&lt;a href=&quot;#NO-1&quot; class=&quot;headerlink&quot; title=&quot;NO.1&quot;&gt;&lt;/a&gt;NO.1&lt;/h2&gt;&lt;h3 id=&quot;emsp-emsp-什么是拍&quot;&gt;&lt;a href=&quot;#emsp-emsp-什么是拍&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;什么是拍?&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;什么是拍?&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1 2 3 4 | 2 2 3 4 | 3 2 3 4。。。&lt;br&gt;这就是拍，一个数字就是一拍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;emsp-emsp-什么是速度&quot;&gt;&lt;a href=&quot;#emsp-emsp-什么是速度&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;什么是速度?&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;什么是速度?&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;一分钟有多少拍&lt;br&gt;
    
    </summary>
    
      <category term="乐理" scheme="http://cssmini.com/categories/%E4%B9%90%E7%90%86/"/>
    
    
      <category term="兴趣" scheme="http://cssmini.com/tags/%E5%85%B4%E8%B6%A3/"/>
    
  </entry>
  
  <entry>
    <title>洞玄灵宝定观经</title>
    <link href="http://cssmini.com/2018/04/01/%E6%B4%9E%E7%8E%84%E7%81%B5%E5%AE%9D%E5%AE%9A%E8%A7%82%E7%BB%8F/"/>
    <id>http://cssmini.com/2018/04/01/洞玄灵宝定观经/</id>
    <published>2018-04-01T08:14:07.000Z</published>
    <updated>2018-06-22T03:45:16.698Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p6wzlnrcf.bkt.clouddn.com/12312312312415.jpeg" alt="image"></p><p>  天尊告左玄真人曰：夫欲修道，先能舍事。外事都绝，无与忤心。<a id="more"></a>然后安坐，内观心起。若觉一念起，须除灭务令安静。其次，虽非的有贪着，浮游乱想，亦尽灭除。昼夜勤行，须臾不替。唯灭动心，不灭照心。但凝空心，不凝住心。不依一法，而心常住。然则凡心，躁兢其次，初学息心甚难，或息不得，暂停还失。去留交战，百体流行。久久精思，方乃调熟。勿以暂收不得，遂废千生之业。少得静已，则于行立坐卧之时，涉事之处，喧闹之所，皆作意安。有事无事，常若无心。处静处喧，其志惟一。若束心太急，又则成病。气发狂颠，是其候也。心若不动，又须放任。宽急得所，自恒调适。制而不着，放而不动。处喧无恶，涉事无恼者，此是真定。不以涉事无恼，故求多事；不以处喧无恶，强来就喧。以无事为真宅，有事为应迹。若水镜之为鉴，则随物而现形。善巧方便，唯能入定。慧发迟速，则不由人。勿令定中，急急求慧。急则伤性，伤则无慧。若定不求慧，而慧自生，此名真慧。慧而不用，实智若愚。益资定慧，双美无极。若定中念想，多感众邪。妖精百魅，随心应见。所见天尊，诸仙真人，是其祥也。唯念定心之上，豁然无覆；定心之下，旷然无基。旧业日消，新业不造。无所挂碍，迥脱尘笼。行而久之，自然得道。</p><p>  夫得道之人，凡有七候。一者，心得易定，觉诸尘漏。二者，宿疾普销，身心轻爽。三者，填补夭损，还年复命。四者，延数万岁，名曰仙人。五者，炼形为气，名曰真人。六者，炼气成神，名曰神人。七者，炼神合道，名曰至人。其于鉴力，随候益明。得至道成，慧乃圆备。若乃久学定心，身无一候。促龄秽质，色谢方空。自云慧觉，又称成道者，求道之理，实所未然。说颂曰：智起生于境，火发生于缘。各是真种性，承流失道源。起心欲息知，心起知更烦。了知性本空，知则众妙门。</p><p>  #转载自网络</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6wzlnrcf.bkt.clouddn.com/12312312312415.jpeg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;  天尊告左玄真人曰：夫欲修道，先能舍事。外事都绝，无与忤心。
    
    </summary>
    
      <category term="观心" scheme="http://cssmini.com/categories/%E8%A7%82%E5%BF%83/"/>
    
    
      <category term="观照" scheme="http://cssmini.com/tags/%E8%A7%82%E7%85%A7/"/>
    
  </entry>
  
  <entry>
    <title>对于框架的理解</title>
    <link href="http://cssmini.com/2018/01/09/mybatis/"/>
    <id>http://cssmini.com/2018/01/09/mybatis/</id>
    <published>2018-01-09T12:55:37.000Z</published>
    <updated>2018-06-22T06:44:31.172Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p6wzlnrcf.bkt.clouddn.com/bolg-message-backgrund.jpg" alt="image"></p><h1 id="框架技术"><a href="#框架技术" class="headerlink" title="框架技术"></a>框架技术</h1><h2 id="什么是框架："><a href="#什么是框架：" class="headerlink" title="什么是框架："></a>什么是框架：</h2><p>客观解释：</p><blockquote><p>框架（Framework）框架这个词最早出现在建筑领域，指的是在建造房屋前期构建的建筑骨架。对于我们所开发的程序来说，“框架”就是我们程序的骨架。通过框架可以使程序开发变得简单且利于维护，使混乱的东西变得有序。++框架的强大之处不是源自它能让你做什么，而是它不能让你做什么！++<br><a id="more"></a><br>个人理解：<br>懒是人类进步的原始动力，车子是、taobao是、框架也是。框架就是让我们站在前辈的肩膀上把偷懒的精神发扬光大。（懒为褒义）</p></blockquote><p>总的来说：</p><blockquote><p>一千个人眼中有一千个哈姆雷特，每一个程序员都有不同的代码风格。框架则将程序员的代码风格强制要求为某一种统一的规范。提高代码的可读性、降低后期的维护成本。</p></blockquote><h1 id="Mybatis框架"><a href="#Mybatis框架" class="headerlink" title="Mybatis框架"></a>Mybatis框架</h1><h2 id="Mybatis框架简介-amp-amp-ORM"><a href="#Mybatis框架简介-amp-amp-ORM" class="headerlink" title="Mybatis框架简介 &amp;&amp; ORM"></a>Mybatis框架简介 &amp;&amp; ORM</h2><h3 id="Mybatis框架简介"><a href="#Mybatis框架简介" class="headerlink" title="Mybatis框架简介"></a>Mybatis框架简介</h3><p>MyBatis是一个开源的数据持久层框架。它内部封装了通过JDBC访问数据库的操作，支持普通的SQL查询、存储过程和高级映射，几乎消除了所有的JDBC代码和参数的手工设置以及结果集的检索。MyBatis作为持久层框架。思想上是将程序中的大量SQL语句剥离出来，配置在配置文件中，实现SQL的灵活配置，这样做的好处是将SQL与程序代码分离，可以在不修改程序代码的情况下，直接在配置文件中修改SQL。</p><p><a href="https://mybatis.org" target="_blank" rel="noopener">MyBatis官网 (科学访问)</a></p><p><a href="https://github.com/mybatis" target="_blank" rel="noopener">Github</a></p><h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3><p>ORM (Object/Relational Mapping) ：</p><blockquote><p>对象/关系映射，是一种数据持久化技术。它在对象模型和关系型数据库之间建立起对应关系，并且提供一种机制，通过JavaBean对象去操作数据库表中的数据.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6wzlnrcf.bkt.clouddn.com/bolg-message-backgrund.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;框架技术&quot;&gt;&lt;a href=&quot;#框架技术&quot; class=&quot;headerlink&quot; title=&quot;框架技术&quot;&gt;&lt;/a&gt;框架技术&lt;/h1&gt;&lt;h2 id=&quot;什么是框架：&quot;&gt;&lt;a href=&quot;#什么是框架：&quot; class=&quot;headerlink&quot; title=&quot;什么是框架：&quot;&gt;&lt;/a&gt;什么是框架：&lt;/h2&gt;&lt;p&gt;客观解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;框架（Framework）框架这个词最早出现在建筑领域，指的是在建造房屋前期构建的建筑骨架。对于我们所开发的程序来说，“框架”就是我们程序的骨架。通过框架可以使程序开发变得简单且利于维护，使混乱的东西变得有序。++框架的强大之处不是源自它能让你做什么，而是它不能让你做什么！++&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://cssmini.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="java" scheme="http://cssmini.com/tags/java/"/>
    
      <category term="web" scheme="http://cssmini.com/tags/web/"/>
    
      <category term="framework" scheme="http://cssmini.com/tags/framework/"/>
    
  </entry>
  
  <entry>
    <title>对人工智能的一些思考</title>
    <link href="http://cssmini.com/2017/12/01/%C2%96%C2%96%E5%AF%B9%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    <id>http://cssmini.com/2017/12/01/对人工智能的一些思考/</id>
    <published>2017-12-01T11:08:40.000Z</published>
    <updated>2018-06-22T03:44:50.356Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p6wzlnrcf.bkt.clouddn.com/0.jpg" alt="image"></p><blockquote><p>前段时间，在朋友圈看到的一张图片。促使我写下了这篇文章。</p></blockquote><p>封面上，满大街的机器人行走散步。人类席地而坐，衣衫滥路扮演着乞讨者的角色。意指明显–在未来社会，人工智能日渐精进，人类的生存空间被机器人剥夺，从而沦为了流落街头的弱者。</p><p>图片所传达的意图，不由的使人联想到目前大火的人工智能话题。世界上首位拥有身份证的智能机器人诞生、阿里ai-双11的超级智能生产力,每秒能做8000张海报、申通快递分拣机器人效率惊人:70%人工下岗、无人超市。这些无不传达着，在未来几年之内工作单一而重复的传统行业将被人工智能替代。<br><a id="more"></a><br><img src="http://p6wzlnrcf.bkt.clouddn.com/1.jpg" alt="image"></p><p>[人类之手与智能科技接触]</p><p>做什么工作最有可能被机器人淘汰？BBC基于剑桥大学研究者MichaelOsborne和Carl Frey的数据体系分析了365种职业在未来的 ”被淘汰概率“，以下是其中部分职业的被淘汰概率。（排名越靠后越安全）</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/2.jpg" alt="image"></p><p>再来看看几条人工智能的新闻：</p><blockquote><p>   前不久，马云的第一家无人超市在杭州开业了</p><p>  中国首个机器人工厂已经在广东东莞建造，这家机器人工厂成功地解放了90%的人类劳动力。</p><p>人工智能医生 “沃森 “已在江苏首诊，10秒就开出了肿瘤治疗方案。</p></blockquote><p>细思极恐，就拿传统的工厂来说，员工上班效率，员工工资与之机器人相比无疑是处于劣势的。机器人仅仅需要日常维护和维修，成本是极为低廉的。</p><p>[智能AR在线购物]</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/3.jpg" alt="image"></p><p>通过上面的数据，我们可以得出如果工作符合以下特征，那么被机器人取代的可能性非常大：</p><pre><code>1.无需天赋，经由训练即可掌握的技能；2.大量的重复性劳动，每天上班无需过脑，但手熟尔；3.工作空间狭小，坐在格子间里，不闻天下事。</code></pre><p>虽说上图中分析详情仅基于这些职业在英国的前景及本土数据，但从这些概率中我们不难发现，如果你的工作包含以下三类技能要求，那么，你被机器人取代的可能性非常小：</p><pre><code>1.社交能力、协商能力、以及人情练达的艺术；2.同情心，以及对他人真心实意的扶助和关切；3.创意和审美。</code></pre><p>你，是否处境危险？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6wzlnrcf.bkt.clouddn.com/0.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;前段时间，在朋友圈看到的一张图片。促使我写下了这篇文章。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;封面上，满大街的机器人行走散步。人类席地而坐，衣衫滥路扮演着乞讨者的角色。意指明显–在未来社会，人工智能日渐精进，人类的生存空间被机器人剥夺，从而沦为了流落街头的弱者。&lt;/p&gt;
&lt;p&gt;图片所传达的意图，不由的使人联想到目前大火的人工智能话题。世界上首位拥有身份证的智能机器人诞生、阿里ai-双11的超级智能生产力,每秒能做8000张海报、申通快递分拣机器人效率惊人:70%人工下岗、无人超市。这些无不传达着，在未来几年之内工作单一而重复的传统行业将被人工智能替代。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://cssmini.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://cssmini.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="胡思乱想" scheme="http://cssmini.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>编程简史</title>
    <link href="http://cssmini.com/2017/11/28/%C2%96%C2%96%E7%BC%96%E7%A8%8B%E7%AE%80%E5%8F%B2/"/>
    <id>http://cssmini.com/2017/11/28/编程简史/</id>
    <published>2017-11-28T15:08:51.000Z</published>
    <updated>2018-06-22T03:44:21.715Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p6wzlnrcf.bkt.clouddn.com/11.jpg" alt="image"></p><blockquote class="blockquote-center"><p>编程简史 </p></blockquote><p>说到编程简史（咳咳，敲黑板)小编给大家从计算机的起源开始说起。</p><p>计算机分为软件和硬件。起初计算机的发明是在二战时期，应用于军事。当时计算机体积一间教室都容纳不下，但是作为人类，懒是科技进步的原始动力。经过大牛的努力计算机的体积不断缩小。计算机也从原来的仅仅应用军事普及到了民用。</p><p>至此，基于计算机硬件得以运行的各种软件如雨后春笋般野蛮生长。而开发这些软件在最初的时候使用的编程语言呢？<br><a id="more"></a><br><img src="http://p6wzlnrcf.bkt.clouddn.com/221222.jpg" alt="image"></p><p>叫做机器语言，机器语言见名知意，是给机器看的。</p><p>也就是我们现在所说的二进制：0110 0100…二进制由1和0组成。</p><p>可想而知老是0011 0110 的，大牛看多了也头疼啊，这么多。怎么办呢？ 没错，偷懒。大牛们巧妙的更进一步创造了一种比机器语言更加便利的语言：汇编。<br><blockquote class="blockquote-center"><p>那什么又是汇编呢？ </p></blockquote></p><p>汇编指汇编语言，汇编程序。把汇编语言翻译成机器语言的过程称为汇编。在汇编语言中，用助记符(Memoni)代替操作码，用地址符号(Symbol)或标号(Label)代替地址码。这样用符号代替机器语言的二进制码，就把机器语言变成了汇编语言。</p><p>这下用符号来代替机器语言指挥计算机快捷多了吧？对，确实快多了。但是符号多了也记不住啊。要不说大牛怎么叫大牛呢，思想跟普通人就是不一样，不知道满足还特别懒~</p><p>于是乎，就像西方的上帝说要有光，于是产生的光。上帝说要日夜交替，于是有了白天黑夜。大牛说不行还是太麻烦了。于是自己写了门语言叫做：C语言 ：）</p><p>C语言的诞生，代表着一场革命。它将编程划分为高级语言与低级语言。</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/221225.jpg" alt="image"></p><p>先前的机器语言和汇编是直接指挥计算机硬件进行工作的（效率高），而高级语言 “看不见”机器的硬件结构，不能用于编写直接访问机器硬件资源的系统软件或设备控制软件。为此，一些高级语言提供了与汇编语言之间的调用接口。当然相对的效率会有下降，但是抵不过方便 易用的特点。</p><p>由于C语言简单易用的特性，C语言很快便传播开来，也因为C语言的诞生为后来人提供了一条可行的思路，继而到产生了Java C# VB等等各式各样的编程语言。</p><p>这时，可能有人要说了从C语言的诞生到现在，产生了这么多编程语言。我该学哪一门？哪一门更加厉害实用呢？</p><p>我不能给你一个确定的答案。</p><p>因为，你要有一个思维：编程语言只是工具，工具的如何使用需要的是思维！</p><p>就如同我现在给你一把手枪，你要如何去使用需要的是你的思维。</p><p>也如同文章中的大牛一样，因为机器语言，汇编语言的不实用而产生了要自己造一个出来的想法。</p><p>靠的是什么？同样是思维。</p><p>拥有不同于他人思维，才能走更远。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6wzlnrcf.bkt.clouddn.com/11.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;编程简史 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;说到编程简史（咳咳，敲黑板)小编给大家从计算机的起源开始说起。&lt;/p&gt;
&lt;p&gt;计算机分为软件和硬件。起初计算机的发明是在二战时期，应用于军事。当时计算机体积一间教室都容纳不下，但是作为人类，懒是科技进步的原始动力。经过大牛的努力计算机的体积不断缩小。计算机也从原来的仅仅应用军事普及到了民用。&lt;/p&gt;
&lt;p&gt;至此，基于计算机硬件得以运行的各种软件如雨后春笋般野蛮生长。而开发这些软件在最初的时候使用的编程语言呢？&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://cssmini.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://cssmini.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="胡思乱想" scheme="http://cssmini.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>千里之行--Java环境变量配置</title>
    <link href="http://cssmini.com/2017/11/11/%E5%8D%83%E9%87%8C%E4%B9%8B%E8%A1%8C-Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/"/>
    <id>http://cssmini.com/2017/11/11/千里之行-Java环境变量配置/</id>
    <published>2017-11-11T09:10:28.000Z</published>
    <updated>2018-06-22T06:42:48.253Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p6wzlnrcf.bkt.clouddn.com/wallhaven-638074.jpg" alt="image"></p><p>正所谓欲行其事，必利其器。学习Java也是这个道理。首先学习Java之前我们需要为Java搭建环境变量。大家可以把Java看成是一个需要细心呵护的孩子，在它来到一个陌生的世界时.</p><p>我们需要告诉它，它的家在哪里，门牌号是多少。出去玩的时候，它需要搭哪一辆公交车才能回到家。怎么样才不会迷路。</p><a id="more"></a><p>环境变量就是我们告诉它”地址“的地方。而Java它是一个非常聪明的孩子（不然我们也不会靠这个来吃饭对吧：） ，只需要你告诉它一遍就能够记住。刚刚上面所说的陌生世界就是电脑中的系统啦。</p><p>首先第一步我们需要告诉它</p><p>“它的家在哪里”</p><p>右键桌面上的“计算机图标”-“属性”-“高级系统设置”-“高级”-右下角有一个“环境变量”-“新建“</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/path-1.jpg" alt="image"></p><p>我们就是在这里告诉它”门牌号“是多少多少</p><p>首先 我们的小Java刚来到这个陌生 世界，又需要让它把这里当做一个 温馨的家 我们就需要在这里给他做一个小窝啦。</p><p>所以我们需要告诉电脑：那个谁谁谁，现在在什么什么地方蹲着。它现在那个位置，以后就是它的家了。你按照我说的去做！！！</p><p>步骤：单击新建</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/path-2.jpg" alt="image"> </p><p>变量名：就是我们给Java 的小窝取的名字</p><p>变量值：就是它蹲的地方（就是你安装jdk的路径），注意只需要具体到它的蹲在什么位置. 不需要具体到它多重、多高、穿什么鞋子之类的（又不是查户口，问这么细干嘛：）</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/path-3.jpg" alt="image"> </p><p>单击确定，Java的小窝就做好啦：）  //是不是有点太草率了？？</p><p>然后 我们就需要给它到公安局录入它的身份。//毕竟是黑户口嘛</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/path-4.jpg" alt="image"> </p><p>在系统变量中下拉，找到 PATH</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/path-5.jpg" alt="image"></p><p>注意在这里面的数据，相当于你电脑里面 ” 所有系统软件” 的户口。小手千万别抖：）因为一不小心你电脑中的系统软件就全部变成黑户口了。</p><p>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin</p><p>上面这一行代码相信你如果有用心看我上面辛辛苦苦码的字，就应该知道 %JAVA_HOME% 就是我们刚才给小Java 建的小窝。至于为什么加两个百分号呢？为什么为什么？毕竟叫做小窝嘛，有两个百分号过分了？</p><p>说正经的，这两个百分号有引用的意思，表示将引用 名字为”JAVA_HOME”环境变量中的值。简单点说，用 JAVA_HOME 这串代码代替了它其中的变量值。</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/path-6.jpg" alt="image"></p><p>相当于我们为 上图中所标识 的地址 取了一个别名叫做 JAVA_HOME，方便我们使用与记忆。而且既然是别名 那为什么要叫做JAVA_HOME 也不是为了洋气。</p><p>目的是为了”见名知意”</p><p>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin</p><p>%JAVA_HOME%\bin;</p><p>%JAVA_HOME%\jre\bin;</p><p>上面的路径中存放的则是小Java的具体信息，比如：身高，体重，三围。</p><p>对的，公安局才是查户口的。</p><p>可以打开jdk的安装目录，你可以看到bin目录还有jre目录与jre目录下有一个bin目录。</p><p>做到这里 环境变量还差一步就搭建好了。</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/path-7.jpg" alt="image"> </p><p>我们需要最后建立一个名为：ClassPath 的系统环境变量，下面那一行的路径可以看作是小Java为我们做事时需要使用的工具。</p><p>它们分别是 tools.jar、dt.jar</p><p>可以在jdk的安装路径中找到这两个文件。注意：这个环境变量有点特殊，细心的同学可以发现在变量值中路径值的前面还有两个英文的符号 .; 记得要加上哦：）</p><pre><code>耐得住寂寞，才能享受繁华。开源改变世界，分享成就梦想转载注明公众号出处</code></pre><p>【本文由“讲编程账号”发布，2017年11月25日】</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6wzlnrcf.bkt.clouddn.com/wallhaven-638074.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;正所谓欲行其事，必利其器。学习Java也是这个道理。首先学习Java之前我们需要为Java搭建环境变量。大家可以把Java看成是一个需要细心呵护的孩子，在它来到一个陌生的世界时.&lt;/p&gt;
&lt;p&gt;我们需要告诉它，它的家在哪里，门牌号是多少。出去玩的时候，它需要搭哪一辆公交车才能回到家。怎么样才不会迷路。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://cssmini.com/categories/java/"/>
    
    
      <category term="java" scheme="http://cssmini.com/tags/java/"/>
    
      <category term="环境变量" scheme="http://cssmini.com/tags/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    
      <category term="PATH" scheme="http://cssmini.com/tags/PATH/"/>
    
      <category term="教学" scheme="http://cssmini.com/tags/%E6%95%99%E5%AD%A6/"/>
    
      <category term="千里之行" scheme="http://cssmini.com/tags/%E5%8D%83%E9%87%8C%E4%B9%8B%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>编程入门</title>
    <link href="http://cssmini.com/2017/11/04/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/"/>
    <id>http://cssmini.com/2017/11/04/编程入门/</id>
    <published>2017-11-04T14:05:15.000Z</published>
    <updated>2018-06-22T03:43:58.562Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p6wzlnrcf.bkt.clouddn.com/zplqdokj.bmp" alt="image"></p><p>这篇文章是特地为对编程有兴趣的同学特意准备的，非战斗人员请速速撤离。</p><blockquote class="blockquote-center"><p>０.选择一门编程语言 </p></blockquote><p>选择语言的话不需要纠结太多（但是不推荐易语言之流：），因为编程语言都是大同小异。并且在你精通一门语言之后再去学另一种编程语言时，你会发现卧槽要死要死，这么简单。</p><a id="more"></a><p><img src="http://p6wzlnrcf.bkt.clouddn.com/rm-1.jpg" alt="imgage"></p><p>如果你选择纠结症特别严重的话，那么我推荐你可以从C语言开始你的编程人生。我当初也是通过C语言入门的，这里面有很多故事以后在谈。扯回来，C语言是一门古老的语言。并且是一门面向过程的结构化语言。JAVA、C#、Ｃ＋＋都诞生在其之后。所以选择C语言入门是你学习编程思想的不二之选。</p><blockquote class="blockquote-center"><p>１.确定好语言之后的学习路线 </p></blockquote><p>学习路线我不建议你去购买 ”入门到精通“ 之流的书籍。因为你购买到手之后你会发现 –我擦，这么厚？看到书的那一刻无形之中有股沉重感在心头蔓延~</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/rm-2.jpg" alt="image"></p><p>推荐你上网搜索题目进行实践。编程这种事情，在书本上看十遍不如实际动手操作一遍。推荐的网站有：【开源中国】、【实验楼】、【CSDN】；这些网站都是非常友好的。编译器等等PDF随便一搜就有。在我的公众号上面也有之前我学习过程中收集的题目、视频、PDF，都是已经打包好了的。你可以通过回复 [ 资料 ] 获取。</p><blockquote class="blockquote-center"><p>２.学习过程中可能遇到的问题 </p></blockquote><p>其实，说到学习过程中遇到的问题。我很关心的是你们是否会产生想要放弃的想法。我想对你们说的是：学习这件事，最怕的就是三分钟热度。很多时候并不是你不行，而是你不想！有明确目标的人即使产生厌倦感也能够很快的找回状态。所有，我希望你们扪心自问是否有明确的目标？</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/rm-3.jpg" alt="image"></p><p>如果是编程方面所遇到的难题，你可以上博客网站、论坛上去发帖留言，向大牛请教。当然，我也很乐意为你解决难题。在程序员这个行业，虽然很多人都看起来很呆萌。但其实你接触久了之后你会发现－－其实就是一群闷骚的都比：P</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/rm-4.jpg" alt="image"></p><p>说回来，网络中的资料杂七杂八，质量内容也是参差不齐的。在一定程度上学习资料会影响你的知识汲取速度。编程很简单，不要给自己设限。其实没什么大不了的。就和小学算数一样；</p><p>记住，光看不练不行动是永远得不到结果的。不要想太多，直接动手实操就是最有效的学习！</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/rm-5.jpg" alt="image"></p><p>遇到了难题，不要气馁。换一种思维，遇到了难题说明提升实力的时候来临了。你这次将这个难题解决后技术不是得到了进步？当下次，别人也同样遇到了相同的问题，这不是你装比的机会？</p><p>: ) 很多时候思维决定你的高度。</p><blockquote class="blockquote-center"><p>３.编程的前瞻 </p></blockquote><p>我们现在所处的时代，遍地都是机会。对我个人而言，赶上了这个时代我觉得非常幸福！人工智能的崛起，各路行业大佬各显神通，在未来的几年中，所有的行业都会向智能化靠近。并且相对的很多传统行业都面临着失业的危险，人工智能将替代单一而重复的工作。</p><p>而人工智能的崛起，程序员必将极度紧缺。所以，这个行业的前途会暗淡吗？</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/rm-6.jpg" alt="image"><br>图片截取自TIOBE编程语言排行榜 2017年 - 11月</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6wzlnrcf.bkt.clouddn.com/zplqdokj.bmp&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;这篇文章是特地为对编程有兴趣的同学特意准备的，非战斗人员请速速撤离。&lt;/p&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;０.选择一门编程语言 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;选择语言的话不需要纠结太多（但是不推荐易语言之流：），因为编程语言都是大同小异。并且在你精通一门语言之后再去学另一种编程语言时，你会发现卧槽要死要死，这么简单。&lt;/p&gt;
    
    </summary>
    
      <category term="教学" scheme="http://cssmini.com/categories/%E6%95%99%E5%AD%A6/"/>
    
    
      <category term="教学" scheme="http://cssmini.com/tags/%E6%95%99%E5%AD%A6/"/>
    
      <category term="编程" scheme="http://cssmini.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="C" scheme="http://cssmini.com/tags/C/"/>
    
  </entry>
  
</feed>
